{"ast":null,"code":"var _jsxFileName = \"/Volumes/Macintosh HD - \\u6570\\u636E/yu01/d3_ex/src/chart/partitionchart/partitionChart.jsx\";\nimport React, { Component } from \"react\";\nimport * as d3 from 'd3';\n\nclass PartitionChart extends Component {\n  constructor(props) {\n    super(props);\n    this.data = props.chartState;\n  }\n\n  drawPartition(data) {\n    const padding = this.data.padding;\n    const width = this.data.width;\n    const pieHeight = this.data.pieHeight;\n    const svg = d3.select(\"body\").append(\"svg\").attr(\"width\", this.data.width).attr(\"height\", this.data.pieHeight).style('padding-left', padding.left).style('padding-top', padding.top); // 初始化树状图数据获取器\n\n    const partition = d3.partition().size([width, pieHeight]); // 初始化json数据转成一棵树，这个步骤是非常必要的！！\n    // 将给定的有层次结构的数据转成符合绘图要求的数组\n\n    const root = d3.hierarchy(data) // 这一步对于treeMap非常重要，必不可少，在这里是可以省略的\n    .sum(function (d) {\n      return d.value;\n    }) // 每个节点的value都是自身和所有后代节点的value之和\n    .sort(function (a, b) {\n      return b.value - a.value;\n    }); // 降序\n    // 初始化树状图\n\n    let partitionData = partition(root);\n    console.log(partitionData); // 获取分区\n\n    let block = partitionData.descendants();\n    const color = d3.scaleOrdinal(d3.schemeCategory10);\n    let g = svg.selectAll('g').data(block).enter().append('g');\n    g.append('rect').attr('x', d => d.x0).attr('y', d => d.x0).attr('width', d => d.x1 - d.x0).attr('height', d => d.y1 - d.y0).style('stroke', '#ccc').style('fill', d => color(d.data.name));\n    g.append('text').attr('x', function (d) {\n      return d.x0;\n    }).attr('y', function (d) {\n      return d.y0;\n    }).attr('dx', function (d) {\n      return (d.x1 - d.x0) / 2;\n    }) // 文字水平居中\n    .attr('dy', function (d) {\n      return (d.y1 - d.y0) / 2 - d.data.name.length / 2 * 12;\n    }) // 文字垂直居中,有点瑕疵\n    .attr('font-size', function (d) {\n      return 12 - d.depth + 'px';\n    }) // 文字按深度缩小\n    .attr('writing-mode', 'tb') // 文字从上往下书写\n    .text(function (d) {\n      return d.data.name;\n    });\n  }\n\n  componentDidMount() {\n    this.drawPartition(this.data.packData);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 12\n      }\n    });\n  }\n\n}\n\nexport default PartitionChart;","map":{"version":3,"sources":["/Volumes/Macintosh HD - 数据/yu01/d3_ex/src/chart/partitionchart/partitionChart.jsx"],"names":["React","Component","d3","PartitionChart","constructor","props","data","chartState","drawPartition","padding","width","pieHeight","svg","select","append","attr","style","left","top","partition","size","root","hierarchy","sum","d","value","sort","a","b","partitionData","console","log","block","descendants","color","scaleOrdinal","schemeCategory10","g","selectAll","enter","x0","x1","y1","y0","name","length","depth","text","componentDidMount","packData","render"],"mappings":"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","sourcesContent":["import React,{Component} from \"react\";\nimport * as d3 from 'd3'\n\nclass PartitionChart extends Component{\n  constructor(props) {\n    super(props);\n    this.data = props.chartState\n  }\n\n  drawPartition (data) {\n    const padding = this.data.padding\n    const width = this.data.width\n    const pieHeight = this.data.pieHeight\n\n    const svg = d3.select(\"body\")\n      .append(\"svg\")\n      .attr(\"width\", this.data.width)\n      .attr(\"height\", this.data.pieHeight)\n      .style('padding-left', padding.left)\n      .style('padding-top', padding.top)\n\n    // 初始化树状图数据获取器\n    const partition = d3.partition().size([width, pieHeight])\n\n    // 初始化json数据转成一棵树，这个步骤是非常必要的！！\n    // 将给定的有层次结构的数据转成符合绘图要求的数组\n    const root = d3.hierarchy(data)\n      // 这一步对于treeMap非常重要，必不可少，在这里是可以省略的\n      .sum(function (d) { return d.value })  // 每个节点的value都是自身和所有后代节点的value之和\n      .sort(function (a, b) { return b.value - a.value }) // 降序\n\n    // 初始化树状图\n    let partitionData = partition(root)\n    console.log(partitionData)\n    // 获取分区\n    let block = partitionData.descendants()\n\n    const color = d3.scaleOrdinal(d3.schemeCategory10)\n\n    let g = svg.selectAll('g')\n      .data(block)\n      .enter()\n      .append('g')\n\n    g.append('rect')\n      .attr('x', d => d.x0)\n      .attr('y', d => d.x0)\n      .attr('width', d => d.x1-d.x0)\n      .attr('height', d => d.y1-d.y0)\n      .style('stroke', '#ccc')\n      .style('fill', d => color(d.data.name))\n\n    g.append('text')\n      .attr('x', function (d) { return d.x0 })\n      .attr('y', function (d) { return d.y0 })\n      .attr('dx', function (d) { return (d.x1 - d.x0) / 2 }) // 文字水平居中\n      .attr('dy', function (d) { return (d.y1 - d.y0) / 2 - d.data.name.length / 2 * 12 }) // 文字垂直居中,有点瑕疵\n      .attr('font-size', function (d) { return 12 - d.depth + 'px' }) // 文字按深度缩小\n      .attr('writing-mode', 'tb') // 文字从上往下书写\n      .text(function (d) { return d.data.name })\n  }\n\n  componentDidMount() {\n    this.drawPartition(this.data.packData)\n  }\n\n  render() {\n    return <div></div>\n  }\n\n}\n\nexport default PartitionChart"]},"metadata":{},"sourceType":"module"}