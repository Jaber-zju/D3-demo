{"ast":null,"code":"var _jsxFileName = \"/Volumes/Macintosh HD - \\u6570\\u636E/yu01/d3_ex/src/tree_chart.js\";\nimport React, { Component } from \"react\";\nimport * as d3 from 'd3';\nimport './treeChart.css';\n\nclass Tree_chart extends Component {\n  constructor(props) {\n    super(props);\n    this.data = props.chartState;\n  }\n\n  drawTree(data) {\n    const padding = this.data.padding;\n    const width = this.data.width;\n    const pieHeight = this.data.pieHeight;\n    const svg = d3.select(\"body\").append(\"svg\").attr(\"width\", this.data.width).attr(\"height\", this.data.pieHeight).style('padding-left', padding.left).style('padding-top', padding.top); // 初始化树状图数据获取器\n\n    let tree = d3.tree().size([width, pieHeight - 80]).separation(function (a, b) {\n      return (a.parent === b.parent ? 1 : 2) / a.depth;\n    }); // 初始化json数据转成一棵树，这个步骤是非常必要的！！\n\n    let root = d3.hierarchy(data).sum(function (d) {\n      return d.value; //value都是0？？？\n    }); // 初始化树状图\n\n    let treeData = tree(root); // 获取节点\n\n    let nodes = treeData.descendants(); // 获取边,也就是连线\n\n    let links = treeData.links();\n    console.log(links); // 绘制线\n\n    let g = svg.append('g').attr('transform', 'translate(' + 40 + ',' + 0 + ')');\n    g.selectAll('.link').data(links).enter().append('path').style('fill', '#cccccc'); // .attr('d', d3.linkHorizontal()\n    //   .x(function (d) { return d.y })\n    //   .y(function (d) { return d.x }))\n    // 绘制文本和节点\n\n    g.selectAll('.node').data(nodes).enter().append('g').attr('class', function (d) {\n      return 'node' + (d.children ? ' node--internal' : ' node--leaf');\n    }).attr('transform', function (d) {\n      return 'translate(' + d.y + ',' + d.x + ')';\n    });\n    g.selectAll('.node').append('circle').attr('r', 5).style('fill', 'green');\n    g.selectAll('.node').append('text').attr('dy', 3).attr('x', function (d) {\n      return d.children ? -8 : 8;\n    }).style('text-anchor', function (d) {\n      return d.children ? 'end' : 'start';\n    }).text(function (d) {\n      return d.data.name;\n    }).style('font-size', '11px');\n  }\n\n  componentDidMount() {\n    this.drawTree(this.data.treeData);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 12\n      }\n    });\n  }\n\n}\n\nexport default Tree_chart;","map":{"version":3,"sources":["/Volumes/Macintosh HD - 数据/yu01/d3_ex/src/tree_chart.js"],"names":["React","Component","d3","Tree_chart","constructor","props","data","chartState","drawTree","padding","width","pieHeight","svg","select","append","attr","style","left","top","tree","size","separation","a","b","parent","depth","root","hierarchy","sum","d","value","treeData","nodes","descendants","links","console","log","g","selectAll","enter","children","y","x","text","name","componentDidMount","render"],"mappings":"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","sourcesContent":["import React,{Component} from \"react\";\nimport * as d3 from 'd3'\nimport './treeChart.css'\n\nclass Tree_chart extends Component{\n  constructor(props) {\n    super(props);\n    this.data = props.chartState\n  }\n\n  drawTree (data) {\n    const padding = this.data.padding\n    const width = this.data.width\n    const pieHeight = this.data.pieHeight\n\n    const svg = d3.select(\"body\")\n      .append(\"svg\")\n      .attr(\"width\", this.data.width)\n      .attr(\"height\", this.data.pieHeight)\n      .style('padding-left', padding.left)\n      .style('padding-top', padding.top)\n\n    // 初始化树状图数据获取器\n    let tree = d3.tree()\n      .size([width, pieHeight - 80])\n      .separation(function (a, b) {\n        return (a.parent === b.parent ? 1 : 2) / a.depth\n      })\n\n    // 初始化json数据转成一棵树，这个步骤是非常必要的！！\n    let root = d3.hierarchy(data)\n      .sum(function (d) {\n        return d.value  //value都是0？？？\n      })\n    // 初始化树状图\n    let treeData = tree(root)\n    // 获取节点\n    let nodes = treeData.descendants()\n    // 获取边,也就是连线\n    let links = treeData.links()\n    console.log(links)\n\n    // 绘制线\n    let g = svg.append('g').attr('transform', 'translate(' + 40 + ',' + 0 + ')')\n    g.selectAll('.link')\n      .data(links)\n      .enter()\n      .append('path')\n      .style('fill', '#cccccc')\n      // .attr('d', d3.linkHorizontal()\n      //   .x(function (d) { return d.y })\n      //   .y(function (d) { return d.x }))\n\n    // 绘制文本和节点\n    g.selectAll('.node')\n      .data(nodes)\n      .enter()\n      .append('g')\n      .attr('class', function (d) { return 'node' + (d.children ? ' node--internal' : ' node--leaf') })\n      .attr('transform', function (d) { return 'translate(' + d.y + ',' + d.x + ')' })\n    g.selectAll('.node').append('circle')\n      .attr('r', 5)\n      .style('fill', 'green')\n    g.selectAll('.node').append('text')\n      .attr('dy', 3)\n      .attr('x', function (d) { return d.children ? -8 : 8 })\n      .style('text-anchor', function (d) { return d.children ? 'end' : 'start' })\n      .text(function (d) {\n        return d.data.name\n      })\n      .style('font-size', '11px')\n\n  }\n\n  componentDidMount() {\n    this.drawTree(this.data.treeData)\n  }\n\n  render() {\n    return <div></div>\n  }\n\n}\n\nexport default Tree_chart"]},"metadata":{},"sourceType":"module"}