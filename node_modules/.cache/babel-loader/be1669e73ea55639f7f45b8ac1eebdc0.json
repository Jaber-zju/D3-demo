{"ast":null,"code":"var _jsxFileName = \"/Volumes/Macintosh HD - \\u6570\\u636E/yu01/d3_ex/src/chart/treeMapChart/treeMapChart.jsx\";\nimport React, { Component } from \"react\";\nimport * as d3 from 'd3';\n\nclass TreeMapChart extends Component {\n  constructor(props) {\n    super(props);\n    this.data = props.chartState;\n  }\n\n  drawTreeMap(data) {\n    const padding = this.data.padding;\n    const width = this.data.width;\n    const pieHeight = this.data.pieHeight;\n    const radius = this.data.radius;\n    const svg = d3.select(\"body\").append(\"svg\").attr(\"width\", width).attr(\"height\", pieHeight).style('padding-left', padding.left).style('padding-top', padding.top);\n    const treeMap = d3.treemap().size([width, pieHeight]);\n    const root = d3.hierarchy(data).sum(function (d) {\n      return d.gdp;\n    }); // 每个节点的value都是自身和所有后代节点的value之和\n\n    const tree = treemap(root); // 获取treemap结构树\n\n    const leaves = tree.leaves(); // 将生成的树形结构转化成叶子节点数组\n\n    const color = d3.scaleOrdinal(d3.schemeCategory10);\n    const g = svg.selectAll('g').data(leaves).enter().append('g');\n    g.append('rect').attr('x', d => d.x0).attr('y', d => d.y0).attr('width', d => d.x1 - d.x0).attr('height', d => d.y1 - d.y0).style('stroke', '#ccc').style('fill', (d, i) => color(i));\n    g.append('text').attr('x', function (d) {\n      return d.x0;\n    }).attr('y', function (d) {\n      return d.y0;\n    }).attr('dx', function (d) {\n      return (d.x1 - d.x0) / 2;\n    }) // 文字水平居中\n    .attr('dy', function (d) {\n      return (d.y1 - d.y0) / 2 - d.data.name.length / 2 * 12;\n    }) // 文字垂直居中,有点瑕疵\n    .attr('font-size', function (d) {\n      return 12 - d.depth + 'px';\n    }) // 文字按深度缩小\n    .attr('writing-mode', 'tb') // 文字从上往下书写\n    .text(function (d) {\n      return d.data.name;\n    });\n  }\n\n  componentDidMount() {\n    this.drawTreeMap(this.data.treeMapData);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 12\n      }\n    });\n  }\n\n}\n\nexport default TreeMapChart;","map":{"version":3,"sources":["/Volumes/Macintosh HD - 数据/yu01/d3_ex/src/chart/treeMapChart/treeMapChart.jsx"],"names":["React","Component","d3","TreeMapChart","constructor","props","data","chartState","drawTreeMap","padding","width","pieHeight","radius","svg","select","append","attr","style","left","top","treeMap","treemap","size","root","hierarchy","sum","d","gdp","tree","leaves","color","scaleOrdinal","schemeCategory10","g","selectAll","enter","x0","y0","x1","y1","i","name","length","depth","text","componentDidMount","treeMapData","render"],"mappings":"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","sourcesContent":["import React,{Component} from \"react\";\nimport * as d3 from 'd3'\n\nclass TreeMapChart extends Component{\n  constructor(props) {\n    super(props);\n    this.data = props.chartState\n  }\n\n  drawTreeMap (data) {\n    const padding = this.data.padding\n    const width = this.data.width\n    const pieHeight = this.data.pieHeight\n    const radius = this.data.radius\n\n    const svg = d3.select(\"body\")\n      .append(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", pieHeight)\n      .style('padding-left', padding.left)\n      .style('padding-top', padding.top)\n\n    const treeMap = d3.treemap().size([width, pieHeight])\n    const root = d3.hierarchy(data)\n                    .sum(function (d) { return d.gdp })  // 每个节点的value都是自身和所有后代节点的value之和\n\n    const tree = treemap(root) // 获取treemap结构树\n    const leaves = tree.leaves() // 将生成的树形结构转化成叶子节点数组\n\n    const color = d3.scaleOrdinal(d3.schemeCategory10)\n\n    const g = svg.selectAll('g')\n                  .data(leaves)\n                  .enter()\n                  .append('g')\n\n    g.append('rect')\n      .attr('x', d => d.x0)\n      .attr('y', d => d.y0)\n      .attr('width', d => d.x1-d.x0)\n      .attr('height', d => d.y1-d.y0)\n      .style('stroke', '#ccc')\n      .style('fill', (d, i) => color(i))\n\n    g.append('text')\n      .attr('x', function (d) { return d.x0 })\n      .attr('y', function (d) { return d.y0 })\n      .attr('dx', function (d) { return (d.x1 - d.x0) / 2 }) // 文字水平居中\n      .attr('dy', function (d) { return (d.y1 - d.y0) / 2 - d.data.name.length / 2 * 12 }) // 文字垂直居中,有点瑕疵\n      .attr('font-size', function (d) { return 12 - d.depth + 'px' }) // 文字按深度缩小\n      .attr('writing-mode', 'tb') // 文字从上往下书写\n      .text(function (d) { return d.data.name })\n\n\n  }\n\n  componentDidMount() {\n    this.drawTreeMap(this.data.treeMapData)\n  }\n\n  render() {\n    return <div></div>\n  }\n\n}\n\nexport default TreeMapChart"]},"metadata":{},"sourceType":"module"}