{"ast":null,"code":"var _jsxFileName = \"/Volumes/Macintosh HD - \\u6570\\u636E/yu01/d3_ex/src/barChart.jsx\";\nimport React from 'react';\nimport * as d3 from 'd3';\nexport default class BarChart extends React.Component {\n  constructor() {\n    super();\n\n    this.drawBar = () => {\n      console.log('1');\n      let svg = d3.select(\"body\").append(\"svg\").attr(\"width\", '500px').attr(\"height\", '500px');\n      let bars = svg.selectAll('rect').data(this.state.dataset).enter().append('rect');\n      bars.attr(\"x\", (d, i) => i * 40).attr('y', d => 500 - d * 4).attr('width', 30).attr(\"height\", d => d * 4).attr('fill', 'green').transition().duration(1000).delay(function (d, i) {\n        return 50 * i;\n      }).attr('fill', 'blue'); //加标签\n\n      svg.selectAll('text').data(this.state.dataset).enter().append('text').text(d => d).attr(\"x\", (d, i) => i * 40 + 10).attr(\"y\", d => 500 - d * 4 - 6).attr('font-family', 'sans-serif').attr('font-size', '11px').attr('fill', 'blue');\n    };\n\n    this.state = {\n      dataset: [5, 10, 15, 20, 25, 30, 35],\n      count: 0\n    };\n  }\n\n  componentDidMount() {\n    this.drawBar();\n  }\n\n  render() {\n    var nextData = x => {\n      if (x > 10) {\n        this.state.count = 0;\n        x = 0;\n      }\n\n      return 5 + 3 * x;\n    };\n\n    var pushData = dataset => {\n      // dataset.shift()\n      dataset.push(nextData(++this.state.count));\n      return dataset;\n    };\n\n    let setState = dataset => {\n      this.setState({\n        dataset: pushData(dataset)\n      });\n      d3.select(\"svg\").remove();\n      this.drawBar();\n    };\n\n    const timer = () => {\n      setInterval(() => {\n        setState(this.state.dataset);\n      }, 3000);\n    };\n\n    timer();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/Volumes/Macintosh HD - 数据/yu01/d3_ex/src/barChart.jsx"],"names":["React","d3","BarChart","Component","constructor","drawBar","console","log","svg","select","append","attr","bars","selectAll","data","state","dataset","enter","d","i","transition","duration","delay","text","count","componentDidMount","render","nextData","x","pushData","push","setState","remove","timer","setInterval"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as d3 from 'd3'\nexport default class BarChart extends React.Component{\n  constructor() {\n    super()\n    this.state = {\n      dataset: [ 5, 10, 15, 20, 25, 30, 35],\n      count: 0\n    }\n  }\n  drawBar = () => {\n    console.log('1')\n    let svg = d3.select(\"body\")\n      .append(\"svg\")\n      .attr(\"width\", '500px')\n      .attr(\"height\", '500px')\n\n    let bars = svg.selectAll('rect')\n      .data(this.state.dataset)\n      .enter()\n      .append('rect')\n\n    bars.attr(\"x\", (d, i) => i * 40)\n      .attr('y', d => 500 - d * 4)\n      .attr('width', 30)\n      .attr(\"height\", d => d * 4)\n      .attr('fill','green')\n      .transition()\n      .duration(1000)\n      .delay(function(d,i){\n        return 50*i;\n      })\n      .attr('fill', 'blue')\n\n    //加标签\n    svg.selectAll('text')\n      .data(this.state.dataset)\n      .enter()\n      .append('text')\n      .text(d => d)\n      .attr(\"x\", (d,i) => i * 40 + 10)\n      .attr(\"y\",d => 500-(d*4) - 6)\n      .attr('font-family','sans-serif')\n      .attr('font-size','11px')\n      .attr('fill','blue')\n  }\n\n  componentDidMount() {\n    this.drawBar()\n  }\n\n\n  render() {\n    var nextData = (x) => {\n      if (x > 10) {\n        this.state.count = 0\n        x = 0\n      }\n      return 5 + 3 * x\n    }\n    var pushData = (dataset) => {\n      // dataset.shift()\n      dataset.push(nextData(++this.state.count))\n\n      return dataset\n    }\n    let setState = (dataset) => {\n      this.setState({\n        dataset: pushData(dataset)\n      })\n      d3.select(\"svg\").remove()\n      this.drawBar()\n    }\n    const timer = () => {\n      setInterval(() => {\n        setState(this.state.dataset)\n      }, 3000)\n    }\n    timer()\n\n    return (\n      <div>\n      </div>\n    )\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}