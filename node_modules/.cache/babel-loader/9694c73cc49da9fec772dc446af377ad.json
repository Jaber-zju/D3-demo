{"ast":null,"code":"var _jsxFileName = \"/Volumes/Macintosh HD - \\u6570\\u636E/yu01/d3_ex/src/chart/partitionchart/partitionCircleChart.jsx\";\nimport React, { Component } from \"react\";\nimport * as d3 from 'd3';\n\nclass PartitionCircleChart extends Component {\n  constructor(props) {\n    super(props);\n    this.data = props.chartState;\n  }\n\n  drawPartition(data) {\n    const padding = this.data.padding;\n    const width = this.data.width;\n    const pieHeight = this.data.pieHeight;\n    const radius = this.data.radius;\n    const svg = d3.select(\"body\").append(\"svg\").attr(\"width\", this.data.width).attr(\"height\", this.data.pieHeight).style('padding-left', padding.left).style('padding-top', padding.top); // 初始化树状图数据获取器\n\n    const partition = d3.partition().size([2 * Math.PI, radius * radius]); // 初始化json数据转成一棵树，这个步骤是非常必要的！！\n    // 将给定的有层次结构的数据转成符合绘图要求的数组\n\n    const root = d3.hierarchy(data); // 分区图中不能sum\n    // .sum(function (d) { return d.value })  // 每个节点的value都是自身和所有后代节点的value之和\n    // 初始化分区图\n\n    let partitionData = partition(root);\n    console.log(partitionData); // 获取分区\n\n    let block = partitionData.descendants();\n    const color = d3.scaleOrdinal(d3.schemeCategory10); // 创建弧生成器\n\n    const arc = d3.arc();\n    const arcs = svg.selectAll(\"g\").data(block) // 只能在这里绑定数据才有用，先绑定数据再去画线\n    .enter().append(\"g\").attr(\"transform\", \"translate(\" + outerRadius * 1.2 + \",\" + outerRadius * 1.2 + \")\");\n    let g = svg.selectAll('g').data(block).enter().append('g');\n    g.append('rect').attr('x', d => d.x0).attr('y', d => d.y0).attr('width', d => d.x1 - d.x0).attr('height', d => d.y1 - d.y0).style('stroke', '#ccc').style('fill', (d, i) => color(i));\n    g.append('text').attr('x', function (d) {\n      return d.x0;\n    }).attr('y', function (d) {\n      return d.y0;\n    }).attr('dx', function (d) {\n      return (d.x1 - d.x0) / 2;\n    }) // 文字水平居中\n    .attr('dy', function (d) {\n      return (d.y1 - d.y0) / 2 - d.data.name.length / 2 * 12;\n    }) // 文字垂直居中,有点瑕疵\n    .attr('font-size', function (d) {\n      return 12 - d.depth + 'px';\n    }) // 文字按深度缩小\n    .attr('writing-mode', 'tb') // 文字从上往下书写\n    .text(function (d) {\n      return d.data.name;\n    });\n  }\n\n  componentDidMount() {\n    this.drawPartition(this.data.packData);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 12\n      }\n    });\n  }\n\n}\n\nexport default PartitionCircleChart;","map":{"version":3,"sources":["/Volumes/Macintosh HD - 数据/yu01/d3_ex/src/chart/partitionchart/partitionCircleChart.jsx"],"names":["React","Component","d3","PartitionCircleChart","constructor","props","data","chartState","drawPartition","padding","width","pieHeight","radius","svg","select","append","attr","style","left","top","partition","size","Math","PI","root","hierarchy","partitionData","console","log","block","descendants","color","scaleOrdinal","schemeCategory10","arc","arcs","selectAll","enter","outerRadius","g","d","x0","y0","x1","y1","i","name","length","depth","text","componentDidMount","packData","render"],"mappings":"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","sourcesContent":["import React,{Component} from \"react\";\nimport * as d3 from 'd3'\n\nclass PartitionCircleChart extends Component{\n  constructor(props) {\n    super(props);\n    this.data = props.chartState\n  }\n\n  drawPartition (data) {\n    const padding = this.data.padding\n    const width = this.data.width\n    const pieHeight = this.data.pieHeight\n    const radius = this.data.radius\n\n    const svg = d3.select(\"body\")\n      .append(\"svg\")\n      .attr(\"width\", this.data.width)\n      .attr(\"height\", this.data.pieHeight)\n      .style('padding-left', padding.left)\n      .style('padding-top', padding.top)\n\n    // 初始化树状图数据获取器\n    const partition = d3.partition()\n                        .size([2 * Math.PI, radius * radius])\n\n    // 初始化json数据转成一棵树，这个步骤是非常必要的！！\n    // 将给定的有层次结构的数据转成符合绘图要求的数组\n    const root = d3.hierarchy(data)\n      // 分区图中不能sum\n      // .sum(function (d) { return d.value })  // 每个节点的value都是自身和所有后代节点的value之和\n\n    // 初始化分区图\n    let partitionData = partition(root)\n    console.log(partitionData)\n    // 获取分区\n    let block = partitionData.descendants()\n\n    const color = d3.scaleOrdinal(d3.schemeCategory10)\n\n    // 创建弧生成器\n    const arc = d3.arc()\n\n    const arcs = svg.selectAll(\"g\")\n      .data(block)  // 只能在这里绑定数据才有用，先绑定数据再去画线\n      .enter()\n      .append(\"g\")\n      .attr(\"transform\",\"translate(\" + (outerRadius*1.2) + \",\" + (outerRadius*1.2) + \")\");\n\n    let g = svg.selectAll('g')\n      .data(block)\n      .enter()\n      .append('g')\n\n    g.append('rect')\n      .attr('x', d => d.x0)\n      .attr('y', d => d.y0)\n      .attr('width', d => d.x1-d.x0)\n      .attr('height', d => d.y1-d.y0)\n      .style('stroke', '#ccc')\n      .style('fill', (d, i) => color(i))\n\n    g.append('text')\n      .attr('x', function (d) { return d.x0 })\n      .attr('y', function (d) { return d.y0 })\n      .attr('dx', function (d) { return (d.x1 - d.x0) / 2 }) // 文字水平居中\n      .attr('dy', function (d) { return (d.y1 - d.y0) / 2 - d.data.name.length / 2 * 12 }) // 文字垂直居中,有点瑕疵\n      .attr('font-size', function (d) { return 12 - d.depth + 'px' }) // 文字按深度缩小\n      .attr('writing-mode', 'tb') // 文字从上往下书写\n      .text(function (d) { return d.data.name })\n  }\n\n  componentDidMount() {\n    this.drawPartition(this.data.packData)\n  }\n\n  render() {\n    return <div></div>\n  }\n\n}\n\nexport default PartitionCircleChart"]},"metadata":{},"sourceType":"module"}