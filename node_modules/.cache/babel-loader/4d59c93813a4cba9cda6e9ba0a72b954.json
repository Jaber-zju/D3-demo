{"ast":null,"code":"var _jsxFileName = \"/Volumes/Macintosh HD - \\u6570\\u636E/yu01/d3_ex/src/chart/chordChart/chordChart.js\";\nimport React, { Component } from \"react\";\nimport * as d3 from 'd3';\n\nclass ChordChart extends Component {\n  constructor(props) {\n    super(props);\n    this.data = props.chartState;\n  }\n\n  drawChord(data) {\n    const padding = this.data.padding;\n    const width = this.data.width;\n    const pieHeight = this.data.pieHeight;\n    const radius = this.data.radius;\n    const svg = d3.select(\"body\").append(\"svg\").attr(\"width\", this.data.width).attr(\"height\", this.data.pieHeight).style('padding-left', padding.left).style('padding-top', padding.top);\n    const chord = d3.chord(); // .padAngle(0.03)\n    // .sortSubgroups(d3.ascending)\n\n    console.log(chord); // 获取节点,也就是最后那个group\n\n    const nodes = chord(data)['groups']; // 获取弦,需要剔除最后的那个group\n\n    const arcs = chord(data).map(item => {\n      return item;\n    });\n    const color = d3.scaleOrdinal(d3.schemeCategory10);\n    const g = svg.append('g').attr('transform', 'translate(' + width / 2 + ',' + pieHeight / 2 + ')'); //装节点的容器g\n\n    const gNodes = svg.selectAll('.gNodes').data(nodes).enter().append('g').attr('class', 'gNodes'); // 绘制弧线\n\n    const innerRadius = width / 2 * 0.7;\n    const outerRadius = innerRadius * 1.2;\n    const arc = d3.arc().innerRadius(innerRadius).outerRadius(outerRadius);\n    gNodes.append('path').attr(\"fill\", (d, i) => {\n      return color(i);\n    }) // 这一步必不可少\n    .attr(\"d\", function (d) {\n      return arc(d);\n    }); // 设置圆环内外半径大小\n  }\n\n  componentDidMount() {\n    this.drawChord(this.data.matrix);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 12\n      }\n    });\n  }\n\n}\n\nexport default ChordChart;","map":{"version":3,"sources":["/Volumes/Macintosh HD - 数据/yu01/d3_ex/src/chart/chordChart/chordChart.js"],"names":["React","Component","d3","ChordChart","constructor","props","data","chartState","drawChord","padding","width","pieHeight","radius","svg","select","append","attr","style","left","top","chord","console","log","nodes","arcs","map","item","color","scaleOrdinal","schemeCategory10","g","gNodes","selectAll","enter","innerRadius","outerRadius","arc","d","i","componentDidMount","matrix","render"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;;AAEA,MAAMC,UAAN,SAAyBF,SAAzB,CAAkC;AAChCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,IAAL,GAAYD,KAAK,CAACE,UAAlB;AACD;;AAEDC,EAAAA,SAAS,CAAEF,IAAF,EAAQ;AACf,UAAMG,OAAO,GAAG,KAAKH,IAAL,CAAUG,OAA1B;AACA,UAAMC,KAAK,GAAG,KAAKJ,IAAL,CAAUI,KAAxB;AACA,UAAMC,SAAS,GAAG,KAAKL,IAAL,CAAUK,SAA5B;AACA,UAAMC,MAAM,GAAG,KAAKN,IAAL,CAAUM,MAAzB;AAEA,UAAMC,GAAG,GAAGX,EAAE,CAACY,MAAH,CAAU,MAAV,EACTC,MADS,CACF,KADE,EAETC,IAFS,CAEJ,OAFI,EAEK,KAAKV,IAAL,CAAUI,KAFf,EAGTM,IAHS,CAGJ,QAHI,EAGM,KAAKV,IAAL,CAAUK,SAHhB,EAITM,KAJS,CAIH,cAJG,EAIaR,OAAO,CAACS,IAJrB,EAKTD,KALS,CAKH,aALG,EAKYR,OAAO,CAACU,GALpB,CAAZ;AAOA,UAAMC,KAAK,GAAGlB,EAAE,CAACkB,KAAH,EAAd,CAbe,CAcC;AACA;;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAhBe,CAkBf;;AACA,UAAMG,KAAK,GAAGH,KAAK,CAACd,IAAD,CAAL,CAAY,QAAZ,CAAd,CAnBe,CAqBf;;AACA,UAAMkB,IAAI,GAAGJ,KAAK,CAACd,IAAD,CAAL,CAAYmB,GAAZ,CAAiBC,IAAD,IAAU;AACrC,aAAOA,IAAP;AACD,KAFY,CAAb;AAIA,UAAMC,KAAK,GAAGzB,EAAE,CAAC0B,YAAH,CAAgB1B,EAAE,CAAC2B,gBAAnB,CAAd;AAEA,UAAMC,CAAC,GAAGjB,GAAG,CAACE,MAAJ,CAAW,GAAX,EACKC,IADL,CACU,WADV,EACuB,eAAeN,KAAK,GAAC,CAArB,GAAyB,GAAzB,GAA+BC,SAAS,GAAC,CAAzC,GAA6C,GADpE,CAAV,CA5Be,CA+Bf;;AACA,UAAMoB,MAAM,GAAGlB,GAAG,CAACmB,SAAJ,CAAc,SAAd,EACI1B,IADJ,CACSiB,KADT,EAEIU,KAFJ,GAGIlB,MAHJ,CAGW,GAHX,EAIIC,IAJJ,CAIS,OAJT,EAIkB,QAJlB,CAAf,CAhCe,CAsCf;;AACA,UAAMkB,WAAW,GAAGxB,KAAK,GAAG,CAAR,GAAY,GAAhC;AACA,UAAMyB,WAAW,GAAGD,WAAW,GAAG,GAAlC;AAEA,UAAME,GAAG,GAAGlC,EAAE,CAACkC,GAAH,GACTF,WADS,CACGA,WADH,EAETC,WAFS,CAEGA,WAFH,CAAZ;AAIAJ,IAAAA,MAAM,CAAChB,MAAP,CAAc,MAAd,EACOC,IADP,CACY,MADZ,EACoB,CAACqB,CAAD,EAAIC,CAAJ,KAAU;AACtB,aAAOX,KAAK,CAACW,CAAD,CAAZ;AACD,KAHP,EAIM;AAJN,KAKOtB,IALP,CAKY,GALZ,EAKgB,UAASqB,CAAT,EAAW;AACnB,aAAOD,GAAG,CAACC,CAAD,CAAV;AACD,KAPP,EA9Ce,CA0Df;AAOD;;AAEDE,EAAAA,iBAAiB,GAAG;AAClB,SAAK/B,SAAL,CAAe,KAAKF,IAAL,CAAUkC,MAAzB;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AA/E+B;;AAmFlC,eAAetC,UAAf","sourcesContent":["import React,{Component} from \"react\";\nimport * as d3 from 'd3'\n\nclass ChordChart extends Component{\n  constructor(props) {\n    super(props);\n    this.data = props.chartState\n  }\n\n  drawChord (data) {\n    const padding = this.data.padding\n    const width = this.data.width\n    const pieHeight = this.data.pieHeight\n    const radius = this.data.radius\n\n    const svg = d3.select(\"body\")\n      .append(\"svg\")\n      .attr(\"width\", this.data.width)\n      .attr(\"height\", this.data.pieHeight)\n      .style('padding-left', padding.left)\n      .style('padding-top', padding.top)\n\n    const chord = d3.chord()\n                    // .padAngle(0.03)\n                    // .sortSubgroups(d3.ascending)\n    console.log(chord)\n\n    // 获取节点,也就是最后那个group\n    const nodes = chord(data)['groups']\n\n    // 获取弦,需要剔除最后的那个group\n    const arcs = chord(data).map((item) => {\n      return item\n    })\n\n    const color = d3.scaleOrdinal(d3.schemeCategory10)\n\n    const g = svg.append('g')\n                  .attr('transform', 'translate(' + width/2 + ',' + pieHeight/2 + ')')\n\n    //装节点的容器g\n    const gNodes = svg.selectAll('.gNodes')\n                      .data(nodes)\n                      .enter()\n                      .append('g')\n                      .attr('class', 'gNodes')\n\n    // 绘制弧线\n    const innerRadius = width / 2 * 0.7;\n    const outerRadius = innerRadius * 1.2\n\n    const arc = d3.arc()\n      .innerRadius(innerRadius)\n      .outerRadius(outerRadius)\n\n    gNodes.append('path')\n          .attr(\"fill\", (d, i) => {\n            return color(i)\n          })\n          // 这一步必不可少\n          .attr(\"d\",function(d){\n            return arc(d)\n          })\n\n\n\n\n    // 设置圆环内外半径大小\n\n\n\n\n\n\n  }\n\n  componentDidMount() {\n    this.drawChord(this.data.matrix)\n  }\n\n  render() {\n    return <div></div>\n  }\n\n}\n\nexport default ChordChart"]},"metadata":{},"sourceType":"module"}