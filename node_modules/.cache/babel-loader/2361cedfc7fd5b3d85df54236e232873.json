{"ast":null,"code":"var _jsxFileName = \"/Volumes/Macintosh HD - \\u6570\\u636E/yu01/d3_ex/src/chart/chordChart/chordChart.js\";\nimport React, { Component } from \"react\";\nimport * as d3 from 'd3';\n\nclass ChordChart extends Component {\n  constructor(props) {\n    super(props);\n    this.data = props.chartState;\n  }\n\n  drawChord(data) {\n    const padding = this.data.padding;\n    const width = this.data.width;\n    const pieHeight = this.data.pieHeight;\n    const radius = this.data.radius;\n    const svg = d3.select(\"body\").append(\"svg\").attr(\"width\", this.data.width).attr(\"height\", this.data.pieHeight).style('padding-left', padding.left).style('padding-top', padding.top);\n    const chord = d3.chord()(data).padAngle(0.03).sortSubgroups(d3.ascending);\n    console.log(chord); // 获取节点,也就是最后那个group\n\n    let nodes = chord(data)['groups']; // 获取弦,需要剔除最后的那个group\n\n    let arcs = chord(data).map(item => {\n      return item;\n    }); // 设置圆环内外半径大小\n\n    const outerRadius = this.data.width / 4;\n    const innerRadius = this.data.pieHeight / 6; // 设置颜色函数\n\n    const color = d3.scaleOrdinal(d3.schemeCategory10); // 以半径大小创建圆环的圆弧\n\n    const arc = d3.arc().innerRadius(innerRadius).outerRadius(outerRadius); // .cornerRadius(20)   // 环的圆角\n    // 根据前面的圆环图数据来创建一个组合，这个组合用来包含之后的圆弧线\n\n    const g = svg.selectAll(\"g\").data(chord) // 只能在这里绑定数据才有用，先绑定数据再去画线\n    .enter().append(\"g\").attr(\"transform\", \"translate(\" + outerRadius * 1.2 + \",\" + outerRadius * 1.2 + \")\"); // 这一步是画图的关键，画线\n\n    g.append(\"path\").attr(\"fill\", (d, i) => {\n      return color[d.index];\n    }) // 这一步必不可少\n    .attr(\"d\", function (d) {\n      return arc(d);\n    });\n  }\n\n  componentDidMount() {\n    this.drawChord(this.data.matrix);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 12\n      }\n    });\n  }\n\n}\n\nexport default ChordChart;","map":{"version":3,"sources":["/Volumes/Macintosh HD - 数据/yu01/d3_ex/src/chart/chordChart/chordChart.js"],"names":["React","Component","d3","ChordChart","constructor","props","data","chartState","drawChord","padding","width","pieHeight","radius","svg","select","append","attr","style","left","top","chord","padAngle","sortSubgroups","ascending","console","log","nodes","arcs","map","item","outerRadius","innerRadius","color","scaleOrdinal","schemeCategory10","arc","g","selectAll","enter","d","i","index","componentDidMount","matrix","render"],"mappings":"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","sourcesContent":["import React,{Component} from \"react\";\nimport * as d3 from 'd3'\n\nclass ChordChart extends Component{\n  constructor(props) {\n    super(props);\n    this.data = props.chartState\n  }\n\n  drawChord (data) {\n    const padding = this.data.padding\n    const width = this.data.width\n    const pieHeight = this.data.pieHeight\n    const radius = this.data.radius\n\n    const svg = d3.select(\"body\")\n      .append(\"svg\")\n      .attr(\"width\", this.data.width)\n      .attr(\"height\", this.data.pieHeight)\n      .style('padding-left', padding.left)\n      .style('padding-top', padding.top)\n\n    const chord = d3.chord()(data)\n                    .padAngle(0.03)\n                    .sortSubgroups(d3.ascending)\n    console.log(chord)\n    // 获取节点,也就是最后那个group\n    let nodes = chord(data)['groups']\n    // 获取弦,需要剔除最后的那个group\n    let arcs = chord(data).map((item) => {\n      return item\n    })\n\n    // 设置圆环内外半径大小\n    const outerRadius = this.data.width / 4;\n    const innerRadius = this.data.pieHeight / 6;\n\n    // 设置颜色函数\n    const color = d3.scaleOrdinal(d3.schemeCategory10)\n\n    // 以半径大小创建圆环的圆弧\n    const arc = d3.arc()\n      .innerRadius(innerRadius)\n      .outerRadius(outerRadius)\n    // .cornerRadius(20)   // 环的圆角\n\n    // 根据前面的圆环图数据来创建一个组合，这个组合用来包含之后的圆弧线\n    const g = svg.selectAll(\"g\")\n      .data(chord)  // 只能在这里绑定数据才有用，先绑定数据再去画线\n      .enter()\n      .append(\"g\")\n      .attr(\"transform\",\"translate(\" + (outerRadius*1.2) + \",\" + (outerRadius*1.2) + \")\");\n\n    // 这一步是画图的关键，画线\n    g.append(\"path\")\n      .attr(\"fill\", (d, i) => {\n        return color[d.index]\n      })\n      // 这一步必不可少\n      .attr(\"d\",function(d){\n        return arc(d)\n      })\n\n\n\n  }\n\n  componentDidMount() {\n    this.drawChord(this.data.matrix)\n  }\n\n  render() {\n    return <div></div>\n  }\n\n}\n\nexport default ChordChart"]},"metadata":{},"sourceType":"module"}