{"ast":null,"code":"var _jsxFileName = \"/Volumes/Macintosh HD - \\u6570\\u636E/yu01/d3_ex/src/pie_chart.jsx\";\nimport React, { Component } from \"react\";\nimport * as d3 from 'd3';\n\nclass Pie_chart extends Component {\n  constructor(props) {\n    super(props);\n    this.data = props.chartState;\n  }\n\n  drawPie(data) {\n    const padding = this.data.padding;\n    const svg = d3.select(\"body\").append(\"svg\").attr(\"width\", this.data.width).attr(\"height\", this.data.pieHeight).style('padding-left', padding.left).style('padding-top', padding.top); // 将数据转化成圆环图需要的数据结构\n    // const pie = d3.pie().padAngle(0.02)(data)\n\n    const pie = d3.pie()(data); // 设置圆环内外半径大小\n\n    const outerRadius = this.data.width / 2;\n    const innerRadius = this.data.pieHeight / 4; // 以半径大小创建圆环的圆弧\n\n    const arc = d3.arc().innerRadius(0).outerRadius(outerRadius); // .cornerRadius(20)   // 环的圆角\n    // 根据前面的圆环图数据来创建一个组合，这个组合用来包含之后的圆弧线\n\n    const arcs = svg.selectAll(\"g\").data(pie) // 只能在这里绑定数据才有用，先绑定数据再去画线\n    .enter().append(\"g\").attr(\"transform\", \"translate(\" + outerRadius + \",\" + outerRadius + \")\");\n    const color = d3.schemeCategory10;\n    console.log(color); // 这一步是画图的关键，画线\n\n    arcs.append(\"path\").attr(\"fill\", (d, i) => {\n      color(i);\n    }) // 这一步必不可少\n    .attr(\"d\", function (d) {\n      return arc(d);\n    }).attr('stroke', 'black').attr('stroke-width', 1); // 添加文字\n\n    arcs.append(\"text\").attr(\"transform\", function (d) {\n      return \"translate(\" + arc.centroid(d) + \")\";\n    }).attr(\"text-anchor\", \"middle\").text(function (d) {\n      return d.value;\n    });\n  }\n\n  componentDidMount() {\n    this.drawPie(this.data.pieData);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 12\n      }\n    });\n  }\n\n}\n\nexport default Pie_chart;","map":{"version":3,"sources":["/Volumes/Macintosh HD - 数据/yu01/d3_ex/src/pie_chart.jsx"],"names":["React","Component","d3","Pie_chart","constructor","props","data","chartState","drawPie","padding","svg","select","append","attr","width","pieHeight","style","left","top","pie","outerRadius","innerRadius","arc","arcs","selectAll","enter","color","schemeCategory10","console","log","d","i","centroid","text","value","componentDidMount","pieData","render"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;;AAEA,MAAMC,SAAN,SAAwBF,SAAxB,CAAiC;AAC/BG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,IAAL,GAAYD,KAAK,CAACE,UAAlB;AACD;;AAEDC,EAAAA,OAAO,CAAEF,IAAF,EAAQ;AACb,UAAMG,OAAO,GAAG,KAAKH,IAAL,CAAUG,OAA1B;AAEA,UAAMC,GAAG,GAAGR,EAAE,CAACS,MAAH,CAAU,MAAV,EACTC,MADS,CACF,KADE,EAETC,IAFS,CAEJ,OAFI,EAEK,KAAKP,IAAL,CAAUQ,KAFf,EAGTD,IAHS,CAGJ,QAHI,EAGM,KAAKP,IAAL,CAAUS,SAHhB,EAITC,KAJS,CAIH,cAJG,EAIaP,OAAO,CAACQ,IAJrB,EAKTD,KALS,CAKH,aALG,EAKYP,OAAO,CAACS,GALpB,CAAZ,CAHa,CAUb;AACA;;AACA,UAAMC,GAAG,GAAGjB,EAAE,CAACiB,GAAH,GAASb,IAAT,CAAZ,CAZa,CAcb;;AACA,UAAMc,WAAW,GAAG,KAAKd,IAAL,CAAUQ,KAAV,GAAkB,CAAtC;AACA,UAAMO,WAAW,GAAG,KAAKf,IAAL,CAAUS,SAAV,GAAsB,CAA1C,CAhBa,CAkBb;;AACA,UAAMO,GAAG,GAAGpB,EAAE,CAACoB,GAAH,GACGD,WADH,CACe,CADf,EAEGD,WAFH,CAEeA,WAFf,CAAZ,CAnBa,CAsBC;AAEd;;AACA,UAAMG,IAAI,GAAGb,GAAG,CAACc,SAAJ,CAAc,GAAd,EACIlB,IADJ,CACSa,GADT,EACe;AADf,KAEIM,KAFJ,GAGIb,MAHJ,CAGW,GAHX,EAIIC,IAJJ,CAIS,WAJT,EAIqB,eAAeO,WAAf,GAA6B,GAA7B,GAAmCA,WAAnC,GAAiD,GAJtE,CAAb;AAMA,UAAMM,KAAK,GAAGxB,EAAE,CAACyB,gBAAjB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ,EAhCa,CAmCb;;AACAH,IAAAA,IAAI,CAACX,MAAL,CAAY,MAAZ,EACGC,IADH,CACQ,MADR,EACgB,CAACiB,CAAD,EAAIC,CAAJ,KAAU;AACtBL,MAAAA,KAAK,CAACK,CAAD,CAAL;AACD,KAHH,EAIE;AAJF,KAKGlB,IALH,CAKQ,GALR,EAKY,UAASiB,CAAT,EAAW;AACnB,aAAOR,GAAG,CAACQ,CAAD,CAAV;AACD,KAPH,EAQGjB,IARH,CAQQ,QARR,EAQkB,OARlB,EASGA,IATH,CASQ,cATR,EASwB,CATxB,EApCa,CA+Cb;;AACAU,IAAAA,IAAI,CAACX,MAAL,CAAY,MAAZ,EACGC,IADH,CACQ,WADR,EACoB,UAASiB,CAAT,EAAW;AAC3B,aAAO,eAAeR,GAAG,CAACU,QAAJ,CAAaF,CAAb,CAAf,GAAiC,GAAxC;AACD,KAHH,EAIGjB,IAJH,CAIQ,aAJR,EAIsB,QAJtB,EAKGoB,IALH,CAKQ,UAASH,CAAT,EAAW;AACf,aAAOA,CAAC,CAACI,KAAT;AACD,KAPH;AAQD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAK3B,OAAL,CAAa,KAAKF,IAAL,CAAU8B,OAAvB;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AAtE8B;;AA0EjC,eAAelC,SAAf","sourcesContent":["import React,{Component} from \"react\";\nimport * as d3 from 'd3'\n\nclass Pie_chart extends Component{\n  constructor(props) {\n    super(props);\n    this.data = props.chartState\n  }\n\n  drawPie (data) {\n    const padding = this.data.padding\n\n    const svg = d3.select(\"body\")\n      .append(\"svg\")\n      .attr(\"width\", this.data.width)\n      .attr(\"height\", this.data.pieHeight)\n      .style('padding-left', padding.left)\n      .style('padding-top', padding.top)\n\n    // 将数据转化成圆环图需要的数据结构\n    // const pie = d3.pie().padAngle(0.02)(data)\n    const pie = d3.pie()(data)\n\n    // 设置圆环内外半径大小\n    const outerRadius = this.data.width / 2;\n    const innerRadius = this.data.pieHeight / 4;\n\n    // 以半径大小创建圆环的圆弧\n    const arc = d3.arc()\n                  .innerRadius(0)\n                  .outerRadius(outerRadius)\n                  // .cornerRadius(20)   // 环的圆角\n\n    // 根据前面的圆环图数据来创建一个组合，这个组合用来包含之后的圆弧线\n    const arcs = svg.selectAll(\"g\")\n                    .data(pie)  // 只能在这里绑定数据才有用，先绑定数据再去画线\n                    .enter()\n                    .append(\"g\")\n                    .attr(\"transform\",\"translate(\" + outerRadius + \",\" + outerRadius + \")\");\n\n    const color = d3.schemeCategory10\n    console.log(color)\n\n\n    // 这一步是画图的关键，画线\n    arcs.append(\"path\")\n      .attr(\"fill\", (d, i) => {\n        color(i)\n      })\n      // 这一步必不可少\n      .attr(\"d\",function(d){\n        return arc(d)\n      })\n      .attr('stroke', 'black')\n      .attr('stroke-width', 1)\n\n    // 添加文字\n    arcs.append(\"text\")\n      .attr(\"transform\",function(d){\n        return \"translate(\" + arc.centroid(d) + \")\"\n      })\n      .attr(\"text-anchor\",\"middle\")\n      .text(function(d){\n        return d.value\n      })\n  }\n\n  componentDidMount() {\n    this.drawPie(this.data.pieData)\n  }\n\n  render() {\n    return <div></div>\n  }\n\n}\n\nexport default Pie_chart"]},"metadata":{},"sourceType":"module"}