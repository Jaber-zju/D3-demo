{"ast":null,"code":"var _jsxFileName = \"/Volumes/Macintosh HD - \\u6570\\u636E/yu01/d3_ex/src/force_chart.js\";\nimport React, { Component } from \"react\";\nimport * as d3 from 'd3';\n\nclass Force_chart extends Component {\n  constructor(props) {\n    super(props);\n    this.data = props.chartState;\n  }\n\n  drawForceChart(nodes, edges) {\n    const padding = this.data.padding;\n    const width = this.data.width;\n    const pieHeight = this.data.pieHeight;\n    const svg = d3.select(\"body\").append(\"svg\").attr(\"width\", width).attr(\"height\", pieHeight).style('padding-left', padding.left).style('padding-top', padding.top);\n    const g = svg.append('g'); // 则svg中创建g\n\n    const simulation = d3.forceSimulation(nodes) // 指定被引用的nodes数组\n    .force('link', d3.forceLink(edges).distance(100)).force('collision', d3.forceCollide(0.5).strength(0.7)).force('center', d3.forceCenter(width / 2, pieHeight / 2)) // 向心力\n    .force('charge', d3.forceManyBody().strength(-100).distanceMax(400));\n    const edgesLine = svg.selectAll('line').data(edges) // 绑定数据\n    .enter() // 为数据添加对应数量的占位符\n    .append('line') // 在占位符上面生成折线（用path画）\n    .attr('d', d => {\n      return d && 'M ' + d.source.x + ' ' + d.source.y + ' L ' + d.target.x + ' ' + d.target.y;\n    }) //遍历所有数据。d表示当前遍历到的数据，返回绘制的贝塞尔曲线\n    .attr('id', (d, i) => {\n      return i && 'edgepath' + i;\n    }) // 设置id，用于连线文字\n    .attr('marker-end', 'url(#arrow)') // 根据箭头标记的id号标记箭头\n    .style('stroke', '#000') // 颜色\n    .style('stroke-width', 1); // 粗细\n\n    const nodesCircle = svg.selectAll('circle').data(nodes).enter().append('circle') // 创建圆\n    .attr('r', 20) // 半径\n    .style('fill', '#9FF') // 填充颜色\n    .style('stroke', '#9FF') // 边框颜色\n    .style('stroke-width', 1); // 边框粗细\n    // .call(drag) // 拖拽单个节点带动整个图\n    // function onDragStart(d) {\n    //   // console.log('start');\n    //   // console.log(d3.event.active);\n    //   if (!d3.event.active) {\n    //     simulation.alphaTarget(1) // 设置衰减系数，对节点位置移动过程的模拟，数值越高移动越快，数值范围[0，1]\n    //       .restart();  // 拖拽节点后，重新启动模拟\n    //   }\n    //   d.fx = d.x;    // d.x是当前位置，d.fx是静止时位置\n    //   d.fy = d.y;\n    // }\n    // function dragging(d) {\n    //   d.fx = d3.event.x;\n    //   d.fy = d3.event.y;\n    // }\n    // function onDragEnd(d) {\n    //   if (!d3.event.active) simulation.alphaTarget(0);\n    //   d.fx = null;       // 解除dragged中固定的坐标\n    //   d.fy = null;\n    // }\n    // const drag = d3.behavior.drag()\n    //                 .on('start', onDragStart)\n    //                 .on('drag', dragging) // 拖拽过程\n    //                 .on('end', onDragEnd);\n\n    const drag = d3.drag() //定义了元素拖拽行为的原点，设置为圆的圆心位置可以避免明显的元素跳动,第一个参考连接中的例子可以看到明显的跳动\n    .origin(function () {\n      let t = d3.select(this);\n      return {\n        x: t.attr(\"cx\"),\n        y: t.attr(\"cy\")\n      };\n    }).on(\"drag\", dragmove); //定义拖拽行为，此处为重新设置元素圆心位置\n\n    function dragmove(d) {\n      d3.select(this).attr(\"cx\", function () {\n        return d.cx = d3.event.x;\n      }).attr(\"cy\", d.cy = d3.event.y);\n    }\n\n    function onZoomStart(d) {// console.log('start zoom');\n    }\n\n    function zooming(d) {\n      // 缩放和拖拽整个g\n      // console.log('zoom ing', d3.event.transform, d3.zoomTransform(this));\n      g.attr('transform', d3.event.transform); // 获取g的缩放系数和平移的坐标值。\n    }\n\n    function onZoomEnd() {// console.log('zoom end');\n    }\n\n    const zoom = d3.zoom() // .translateExtent([[0, 0], [WIDTH, HEIGHT]]) // 设置或获取平移区间, 默认为[[-∞, -∞], [+∞, +∞]]\n    .scaleExtent([1 / 10, 10]) // 设置最大缩放比例\n    .on('start', onZoomStart).on('zoom', zooming).on('end', onZoomEnd); // 鼠标移入移出圆点的变化\n\n    nodesCircle.on('mouseover', function () {\n      d3.select(this).style('fill', 'green').attr('stroke', 'green');\n      nodesCircle.append('title').text(node => {\n        // .text设置气泡提示内容\n        return node.name; // 气泡提示为node的名称\n      });\n    }).on('mouseout', function () {\n      d3.select(this).style('fill', '#7efffe').attr('stroke', '#7efffe');\n    }); // const svg_edges = svg.selectAll(\"line\")\n    //                         .data(edges)\n    //                         .enter()\n    //                         .append(\"line\")\n    //                         .style(\"stroke\",\"#ccc\")\n    //                         .style(\"stroke-width\",1)\n    //                         .on(\"mouseover\",function(d,i){\n    //                           d3.select(this)\n    //                             .style(\"stroke\",\"grey\")\n    //                             .style(\"stroke-width\",3)\n    //                         })\n    //                         .on(\"mouseout\",function(d,i){\n    //                           d3.select(this)\n    //                             .style(\"stroke\",\"#ccc\")\n    //                             .style(\"stroke-width\",1)\n    //                         })\n    //   const color = d3.schemeSet2\n    //   const svg_nodes = svg.selectAll(\"circle\")\n    //                         .data(nodes)\n    //                         .enter()\n    //                         .append(\"circle\")\n    //                         .attr(\"r\",10)\n    //                         .style(\"fill\",function(d,i){\n    //                           return color[i];\n    //                         })\n    //                         .call(force.drag)\n    //                         // .on('mouseover', d => showDetail(d))\n    //                         // .on(\"mouseover\",function(d,i){\n    //                         //   d3.select(this)\n    //                         //     .attr(\"r\",'20px')\n    //                         //   d3.select('#tooltip')\n    //                         //     .classed('hidden', false)\n    //                         //     .style('left', (d.x - 50))\n    //                         //     .style('top', (d.y-40))\n    //                         //     .select('#place').text(d.name)\n    //                         // })\n    //                         // // .on('mouseout', d => hideDetail())\n    //                         // .on('mouseout', d => {\n    //                         //   d3.select(this)\n    //                         //     .attr(\"r\",'10px')  //鼠标移出时，设置圆点半径报错\n    //                         //   d3.select('#tooltip').classed('hidden', true)\n    //                         //     .select('#place').text()\n    //                         // })\n    //\n\n    simulation.on(\"tick\", function () {\n      edgesLine.attr(\"x1\", function (d) {\n        return d.source.x;\n      });\n      edgesLine.attr(\"y1\", function (d) {\n        return d.source.y;\n      });\n      edgesLine.attr(\"x2\", function (d) {\n        return d.target.x;\n      });\n      edgesLine.attr(\"y2\", function (d) {\n        return d.target.y;\n      });\n      nodesCircle.attr(\"cx\", function (d) {\n        return d.x;\n      });\n      nodesCircle.attr(\"cy\", function (d) {\n        return d.y;\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.drawForceChart(this.data.forceNodes, this.data.forceEdges);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nexport default Force_chart;","map":{"version":3,"sources":["/Volumes/Macintosh HD - 数据/yu01/d3_ex/src/force_chart.js"],"names":["React","Component","d3","Force_chart","constructor","props","data","chartState","drawForceChart","nodes","edges","padding","width","pieHeight","svg","select","append","attr","style","left","top","g","simulation","forceSimulation","force","forceLink","distance","forceCollide","strength","forceCenter","forceManyBody","distanceMax","edgesLine","selectAll","enter","d","source","x","y","target","i","nodesCircle","drag","origin","t","on","dragmove","cx","event","cy","onZoomStart","zooming","transform","onZoomEnd","zoom","scaleExtent","text","node","name","componentDidMount","forceNodes","forceEdges","render"],"mappings":"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","sourcesContent":["import React,{Component} from \"react\";\nimport * as d3 from 'd3'\n\nclass Force_chart extends Component{\n  constructor(props) {\n    super(props)\n    this.data = props.chartState\n  }\n\n  drawForceChart (nodes, edges) {\n    const padding = this.data.padding\n    const width = this.data.width\n    const pieHeight = this.data.pieHeight\n\n    const svg = d3.select(\"body\")\n      .append(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", pieHeight)\n      .style('padding-left', padding.left)\n      .style('padding-top', padding.top)\n\n    const g = svg.append('g'); // 则svg中创建g\n\n    const simulation = d3.forceSimulation(nodes) // 指定被引用的nodes数组\n                          .force('link', d3.forceLink(edges).distance(100))\n                          .force('collision', d3.forceCollide(0.5).strength(0.7))\n                          .force('center', d3.forceCenter(width / 2, pieHeight / 2)) // 向心力\n                          .force('charge', d3.forceManyBody().strength(-100).distanceMax(400));\n\n    const edgesLine = svg.selectAll('line')\n                          .data(edges) // 绑定数据\n                          .enter() // 为数据添加对应数量的占位符\n                          .append('line') // 在占位符上面生成折线（用path画）\n                          .attr('d', (d) => { return d && 'M ' + d.source.x + ' ' + d.source.y + ' L ' + d.target.x + ' ' + d.target.y; }) //遍历所有数据。d表示当前遍历到的数据，返回绘制的贝塞尔曲线\n                          .attr('id', (d, i) => { return i && 'edgepath' + i; }) // 设置id，用于连线文字\n                          .attr('marker-end', 'url(#arrow)') // 根据箭头标记的id号标记箭头\n                          .style('stroke', '#000') // 颜色\n                          .style('stroke-width', 1); // 粗细\n\n    const nodesCircle = svg.selectAll('circle')\n                            .data(nodes)\n                            .enter()\n                            .append('circle') // 创建圆\n                            .attr('r', 20) // 半径\n                            .style('fill', '#9FF') // 填充颜色\n                            .style('stroke', '#9FF') // 边框颜色\n                            .style('stroke-width', 1) // 边框粗细\n                            // .call(drag) // 拖拽单个节点带动整个图\n\n\n    // function onDragStart(d) {\n    //   // console.log('start');\n    //   // console.log(d3.event.active);\n    //   if (!d3.event.active) {\n    //     simulation.alphaTarget(1) // 设置衰减系数，对节点位置移动过程的模拟，数值越高移动越快，数值范围[0，1]\n    //       .restart();  // 拖拽节点后，重新启动模拟\n    //   }\n    //   d.fx = d.x;    // d.x是当前位置，d.fx是静止时位置\n    //   d.fy = d.y;\n    // }\n    // function dragging(d) {\n    //   d.fx = d3.event.x;\n    //   d.fy = d3.event.y;\n    // }\n    // function onDragEnd(d) {\n    //   if (!d3.event.active) simulation.alphaTarget(0);\n    //   d.fx = null;       // 解除dragged中固定的坐标\n    //   d.fy = null;\n    // }\n    // const drag = d3.behavior.drag()\n    //                 .on('start', onDragStart)\n    //                 .on('drag', dragging) // 拖拽过程\n    //                 .on('end', onDragEnd);\n\n    const drag = d3.drag()\n      //定义了元素拖拽行为的原点，设置为圆的圆心位置可以避免明显的元素跳动,第一个参考连接中的例子可以看到明显的跳动\n      .origin(function() {\n        let t = d3.select(this);\n        return {\n          x: t.attr(\"cx\"),\n          y: t.attr(\"cy\")\n        }\n      })\n      .on(\"drag\", dragmove);\n\n    //定义拖拽行为，此处为重新设置元素圆心位置\n    function dragmove(d) {\n      d3.select(this)\n        .attr(\"cx\", function() {\n          return d.cx = d3.event.x\n        })\n        .attr(\"cy\", d.cy = d3.event.y)\n    }\n\n    function onZoomStart(d) {\n      // console.log('start zoom');\n    }\n    function zooming(d) {\n      // 缩放和拖拽整个g\n      // console.log('zoom ing', d3.event.transform, d3.zoomTransform(this));\n      g.attr('transform', d3.event.transform); // 获取g的缩放系数和平移的坐标值。\n    }\n    function onZoomEnd() {\n      // console.log('zoom end');\n    }\n    const zoom = d3.zoom()\n      // .translateExtent([[0, 0], [WIDTH, HEIGHT]]) // 设置或获取平移区间, 默认为[[-∞, -∞], [+∞, +∞]]\n      .scaleExtent([1 / 10, 10]) // 设置最大缩放比例\n      .on('start', onZoomStart)\n      .on('zoom', zooming)\n      .on('end', onZoomEnd);\n\n    // 鼠标移入移出圆点的变化\n    nodesCircle\n      .on('mouseover', function () {\n      d3.select(this).style('fill', 'green').attr('stroke', 'green')\n        nodesCircle.append('title')\n          .text((node) => { // .text设置气泡提示内容\n            return node.name; // 气泡提示为node的名称\n          });\n    })\n      .on('mouseout', function () {\n        d3.select(this).style('fill', '#7efffe').attr('stroke', '#7efffe')\n      })\n\n\n\n\n  // const svg_edges = svg.selectAll(\"line\")\n  //                         .data(edges)\n  //                         .enter()\n  //                         .append(\"line\")\n  //                         .style(\"stroke\",\"#ccc\")\n  //                         .style(\"stroke-width\",1)\n  //                         .on(\"mouseover\",function(d,i){\n  //                           d3.select(this)\n  //                             .style(\"stroke\",\"grey\")\n  //                             .style(\"stroke-width\",3)\n  //                         })\n  //                         .on(\"mouseout\",function(d,i){\n  //                           d3.select(this)\n  //                             .style(\"stroke\",\"#ccc\")\n  //                             .style(\"stroke-width\",1)\n  //                         })\n  //   const color = d3.schemeSet2\n  //   const svg_nodes = svg.selectAll(\"circle\")\n  //                         .data(nodes)\n  //                         .enter()\n  //                         .append(\"circle\")\n  //                         .attr(\"r\",10)\n  //                         .style(\"fill\",function(d,i){\n  //                           return color[i];\n  //                         })\n  //                         .call(force.drag)\n  //                         // .on('mouseover', d => showDetail(d))\n  //                         // .on(\"mouseover\",function(d,i){\n  //                         //   d3.select(this)\n  //                         //     .attr(\"r\",'20px')\n  //                         //   d3.select('#tooltip')\n  //                         //     .classed('hidden', false)\n  //                         //     .style('left', (d.x - 50))\n  //                         //     .style('top', (d.y-40))\n  //                         //     .select('#place').text(d.name)\n  //                         // })\n  //                         // // .on('mouseout', d => hideDetail())\n  //                         // .on('mouseout', d => {\n  //                         //   d3.select(this)\n  //                         //     .attr(\"r\",'10px')  //鼠标移出时，设置圆点半径报错\n  //                         //   d3.select('#tooltip').classed('hidden', true)\n  //                         //     .select('#place').text()\n  //                         // })\n  //\n    simulation.on(\"tick\", function(){\n      edgesLine.attr(\"x1\",function(d){ return d.source.x; });\n      edgesLine.attr(\"y1\",function(d){ return d.source.y; });\n      edgesLine.attr(\"x2\",function(d){ return d.target.x; });\n      edgesLine.attr(\"y2\",function(d){ return d.target.y; });\n\n      nodesCircle.attr(\"cx\",function(d){ return d.x; });\n      nodesCircle.attr(\"cy\",function(d){ return d.y; });\n    });\n  }\n\n  componentDidMount() {\n    this.drawForceChart(this.data.forceNodes, this.data.forceEdges)\n  }\n\n  render() {\n    return (\n      <div></div>\n    )\n  }\n\n}\n\nexport default Force_chart"]},"metadata":{},"sourceType":"module"}