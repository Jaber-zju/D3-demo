{"ast":null,"code":"var _jsxFileName = \"/Volumes/Macintosh HD - \\u6570\\u636E/yu01/d3_ex/src/tree_chart.js\";\nimport React, { Component } from \"react\";\nimport * as d3 from 'd3';\n\nclass Tree_chart extends Component {\n  constructor(props) {\n    super(props);\n    this.data = props.chartState;\n  }\n\n  drawTree(data) {\n    const padding = this.data.padding;\n    const width = this.data.width;\n    const pieHeight = this.data.pieHeight;\n    const svg = d3.select(\"body\").append(\"svg\").attr(\"width\", this.data.width).attr(\"height\", this.data.pieHeight).style('padding-left', padding.left).style('padding-top', padding.top); // 初始化树状图数据获取器\n\n    let tree = d3.tree().size([width, pieHeight - 80]).separation(function (a, b) {\n      return (a.parent === b.parent ? 1 : 2) / a.depth;\n    }); // 初始化json数据转成一棵树，这个步骤是非常必要的！！\n\n    let root = d3.hierarchy(data).sum(function (d) {\n      return d.value;\n    });\n    console.log(root); // 初始化树状图\n\n    let treeData = tree(root).descendants; // 画圆\n    // svg.selectAll('circle')\n    //   .data(nodes)\n    //   .enter()\n    //   .append('circle')\n    //   .style('fill', function (d) { return color(d.depth) })\n    //   // .style('fill', function (d) { return color[d.depth] })\n    //   .attr('cx', function (d) { return d.x })\n    //   .attr('cy', function (d) { return d.y })\n    //   .attr('r', function (d) { return d.r })\n    //   .on('mouseover', function (d) {\n    //     d3.event.target.style.stroke = 'yellow'\n    //     // d3.select(this).style('stroke', 'white')\n    //     d3.event.target.style.strokeWidth = '2px'\n    //     svg.append('text')\n    //       .style('fill', 'black')\n    //       .style('opacity', '0.5')\n    //       .attr('class', 'hello')\n    //       .attr('x', d3.event.offsetX + 20)\n    //       .attr('y', d3.event.offsetY - 10)\n    //       .text(d.data.name)\n    //   })\n    //   .on('mouseout', function (d) {\n    //     svg.selectAll('.hello').remove()\n    //     d3.event.target.style.strokeWidth = '0px'\n    //   })\n    //\n    // // 文字\n    // svg.selectAll('text')\n    //   .data(nodes)\n    //   .enter()\n    //   .append('text')\n    //   .style('fill', 'black')\n    //   .style('fill-opacity', function (d) { return d.children ? 0 : 1 }) // 设置包含子节点的文字不显示\n    //   .attr('x', function (d) { return d.x })\n    //   .attr('y', function (d) { return d.y })\n    //   .attr('dy', '.3em')\n    //   .attr('dx', function (d) { return '-' + d.data.name.length / 2 + 'em' }) // 设置文字居中，通过dx 负文字个数的二分之一\n    //   .text(function (d) { return d.data.name })\n    //   .style('font-size', function (d) { return 12 - d.depth + 'px' })\n  }\n\n  componentDidMount() {\n    this.drawTree(this.data.packData);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 12\n      }\n    });\n  }\n\n}\n\nexport default Tree_chart;","map":{"version":3,"sources":["/Volumes/Macintosh HD - 数据/yu01/d3_ex/src/tree_chart.js"],"names":["React","Component","d3","Tree_chart","constructor","props","data","chartState","drawTree","padding","width","pieHeight","svg","select","append","attr","style","left","top","tree","size","separation","a","b","parent","depth","root","hierarchy","sum","d","value","console","log","treeData","descendants","componentDidMount","packData","render"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;;AAEA,MAAMC,UAAN,SAAyBF,SAAzB,CAAkC;AAChCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,IAAL,GAAYD,KAAK,CAACE,UAAlB;AACD;;AAEDC,EAAAA,QAAQ,CAAEF,IAAF,EAAQ;AACd,UAAMG,OAAO,GAAG,KAAKH,IAAL,CAAUG,OAA1B;AACA,UAAMC,KAAK,GAAG,KAAKJ,IAAL,CAAUI,KAAxB;AACA,UAAMC,SAAS,GAAG,KAAKL,IAAL,CAAUK,SAA5B;AAEA,UAAMC,GAAG,GAAGV,EAAE,CAACW,MAAH,CAAU,MAAV,EACTC,MADS,CACF,KADE,EAETC,IAFS,CAEJ,OAFI,EAEK,KAAKT,IAAL,CAAUI,KAFf,EAGTK,IAHS,CAGJ,QAHI,EAGM,KAAKT,IAAL,CAAUK,SAHhB,EAITK,KAJS,CAIH,cAJG,EAIaP,OAAO,CAACQ,IAJrB,EAKTD,KALS,CAKH,aALG,EAKYP,OAAO,CAACS,GALpB,CAAZ,CALc,CAYd;;AACA,QAAIC,IAAI,GAAGjB,EAAE,CAACiB,IAAH,GACRC,IADQ,CACH,CAACV,KAAD,EAAQC,SAAS,GAAG,EAApB,CADG,EAERU,UAFQ,CAEG,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC1B,aAAO,CAACD,CAAC,CAACE,MAAF,KAAaD,CAAC,CAACC,MAAf,GAAwB,CAAxB,GAA4B,CAA7B,IAAkCF,CAAC,CAACG,KAA3C;AACD,KAJQ,CAAX,CAbc,CAmBd;;AACA,QAAIC,IAAI,GAAGxB,EAAE,CAACyB,SAAH,CAAarB,IAAb,EACRsB,GADQ,CACJ,UAAUC,CAAV,EAAa;AAChB,aAAOA,CAAC,CAACC,KAAT;AACD,KAHQ,CAAX;AAIAC,IAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ,EAxBc,CAyBd;;AACA,QAAIO,QAAQ,GAAGd,IAAI,CAACO,IAAD,CAAJ,CAAWQ,WAA1B,CA1Bc,CA4Bd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAK3B,QAAL,CAAc,KAAKF,IAAL,CAAU8B,QAAxB;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AApF+B;;AAwFlC,eAAelC,UAAf","sourcesContent":["import React,{Component} from \"react\";\nimport * as d3 from 'd3'\n\nclass Tree_chart extends Component{\n  constructor(props) {\n    super(props);\n    this.data = props.chartState\n  }\n\n  drawTree (data) {\n    const padding = this.data.padding\n    const width = this.data.width\n    const pieHeight = this.data.pieHeight\n\n    const svg = d3.select(\"body\")\n      .append(\"svg\")\n      .attr(\"width\", this.data.width)\n      .attr(\"height\", this.data.pieHeight)\n      .style('padding-left', padding.left)\n      .style('padding-top', padding.top)\n\n    // 初始化树状图数据获取器\n    let tree = d3.tree()\n      .size([width, pieHeight - 80])\n      .separation(function (a, b) {\n        return (a.parent === b.parent ? 1 : 2) / a.depth\n      })\n\n    // 初始化json数据转成一棵树，这个步骤是非常必要的！！\n    let root = d3.hierarchy(data)\n      .sum(function (d) {\n        return d.value\n      })\n    console.log(root)\n    // 初始化树状图\n    let treeData = tree(root).descendants\n\n    // 画圆\n    // svg.selectAll('circle')\n    //   .data(nodes)\n    //   .enter()\n    //   .append('circle')\n    //   .style('fill', function (d) { return color(d.depth) })\n    //   // .style('fill', function (d) { return color[d.depth] })\n    //   .attr('cx', function (d) { return d.x })\n    //   .attr('cy', function (d) { return d.y })\n    //   .attr('r', function (d) { return d.r })\n    //   .on('mouseover', function (d) {\n    //     d3.event.target.style.stroke = 'yellow'\n    //     // d3.select(this).style('stroke', 'white')\n    //     d3.event.target.style.strokeWidth = '2px'\n    //     svg.append('text')\n    //       .style('fill', 'black')\n    //       .style('opacity', '0.5')\n    //       .attr('class', 'hello')\n    //       .attr('x', d3.event.offsetX + 20)\n    //       .attr('y', d3.event.offsetY - 10)\n    //       .text(d.data.name)\n    //   })\n    //   .on('mouseout', function (d) {\n    //     svg.selectAll('.hello').remove()\n    //     d3.event.target.style.strokeWidth = '0px'\n    //   })\n    //\n    // // 文字\n    // svg.selectAll('text')\n    //   .data(nodes)\n    //   .enter()\n    //   .append('text')\n    //   .style('fill', 'black')\n    //   .style('fill-opacity', function (d) { return d.children ? 0 : 1 }) // 设置包含子节点的文字不显示\n    //   .attr('x', function (d) { return d.x })\n    //   .attr('y', function (d) { return d.y })\n    //   .attr('dy', '.3em')\n    //   .attr('dx', function (d) { return '-' + d.data.name.length / 2 + 'em' }) // 设置文字居中，通过dx 负文字个数的二分之一\n    //   .text(function (d) { return d.data.name })\n    //   .style('font-size', function (d) { return 12 - d.depth + 'px' })\n\n\n  }\n\n  componentDidMount() {\n    this.drawTree(this.data.packData)\n  }\n\n  render() {\n    return <div></div>\n  }\n\n}\n\nexport default Tree_chart"]},"metadata":{},"sourceType":"module"}