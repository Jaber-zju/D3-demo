{"ast":null,"code":"var _jsxFileName = \"/Volumes/Macintosh HD - \\u6570\\u636E/yu01/d3_ex/src/chart/clusterChart/circleClusterChart.jsx\";\nimport React, { Component } from \"react\";\nimport * as d3 from 'd3';\n\nclass CircleClusteChart extends Component {\n  constructor(props) {\n    super(props);\n    this.data = props.chartState;\n  }\n\n  drawCluster(data) {\n    const padding = this.data.padding;\n    const width = this.data.width;\n    const pieHeight = this.data.pieHeight;\n    const svg = d3.select(\"body\").append(\"svg\").attr(\"width\", this.data.width).attr(\"height\", this.data.pieHeight).style('padding-left', padding.left).style('padding-top', padding.top); // 初始化树状图数据获取器\n\n    let cluster = d3.cluster().size([width, pieHeight - 80]).separation(function (a, b) {\n      return (a.parent === b.parent ? 1 : 2) / a.depth;\n    }); // 初始化json数据转成一棵树，这个步骤是非常必要的！！\n\n    let root = d3.hierarchy(data).sum(function (d) {\n      return d.value; //value都是0？？？\n    }); // 初始化树状图\n\n    let clusterData = cluster(root); // 获取节点\n\n    let nodes = clusterData.descendants(); // 获取边,也就是连线\n\n    let links = clusterData.links();\n    console.log(links); // 绘制线\n\n    let g = svg.append('g').attr('transform', 'translate(' + width / 2 + ',' + pieHeight / 2 + ')');\n    g.selectAll('.link').data(links).enter().append('path').style('fill', '#cccccc').attr('d', d3.linkRadial().angle(function (d) {\n      return d.x / 180 * Math.PI;\n    }).radius(function (d) {\n      return d.y / 2;\n    })); // 绘制文本和节点\n\n    g.selectAll('.node').data(nodes).enter().append('g').attr('class', function (d) {\n      return 'node' + (d.children ? ' node--internal' : ' node--leaf');\n    }).attr('transform', function (d) {\n      return 'rotate(' + (d.x - 90) + ')translate(' + d.y / 2 + ')';\n    });\n    g.selectAll('.node').append('circle').attr('r', 5).style('fill', 'green');\n    g.selectAll('.node').append('text').attr('dx', function (d) {\n      return d.x < 180 ? 8 : -8;\n    }).attr('dy', '0.31em').attr('text-anchor', function (d) {\n      return d.x < 180 ? 'start' : 'end';\n    }).attr('transform', function (d) {\n      return d.x < 180 ? 'rotate(90)' : 'rotate(0)';\n    }).text(function (d) {\n      return d.data.name;\n    }).style('font-size', '11px');\n  }\n\n  componentDidMount() {\n    this.drawCluster(this.data.treeData);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 12\n      }\n    });\n  }\n\n}\n\nexport default CircleClusteChart;","map":{"version":3,"sources":["/Volumes/Macintosh HD - 数据/yu01/d3_ex/src/chart/clusterChart/circleClusterChart.jsx"],"names":["React","Component","d3","CircleClusteChart","constructor","props","data","chartState","drawCluster","padding","width","pieHeight","svg","select","append","attr","style","left","top","cluster","size","separation","a","b","parent","depth","root","hierarchy","sum","d","value","clusterData","nodes","descendants","links","console","log","g","selectAll","enter","linkRadial","angle","x","Math","PI","radius","y","children","text","name","componentDidMount","treeData","render"],"mappings":"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","sourcesContent":["import React,{Component} from \"react\";\nimport * as d3 from 'd3'\n\nclass CircleClusteChart extends Component{\n  constructor(props) {\n    super(props);\n    this.data = props.chartState\n  }\n\n  drawCluster (data) {\n    const padding = this.data.padding\n    const width = this.data.width\n    const pieHeight = this.data.pieHeight\n\n    const svg = d3.select(\"body\")\n      .append(\"svg\")\n      .attr(\"width\", this.data.width)\n      .attr(\"height\", this.data.pieHeight)\n      .style('padding-left', padding.left)\n      .style('padding-top', padding.top)\n\n    // 初始化树状图数据获取器\n    let cluster = d3.cluster()\n      .size([width, pieHeight - 80])\n      .separation(function (a, b) {\n        return (a.parent === b.parent ? 1 : 2) / a.depth\n      })\n\n    // 初始化json数据转成一棵树，这个步骤是非常必要的！！\n    let root = d3.hierarchy(data)\n      .sum(function (d) {\n        return d.value  //value都是0？？？\n      })\n    // 初始化树状图\n    let clusterData = cluster(root)\n    // 获取节点\n    let nodes = clusterData.descendants()\n    // 获取边,也就是连线\n    let links = clusterData.links()\n    console.log(links)\n\n    // 绘制线\n    let g = svg.append('g').attr('transform', 'translate(' + width/2 + ',' + pieHeight/2 + ')')\n    g.selectAll('.link')\n      .data(links)\n      .enter()\n      .append('path')\n      .style('fill', '#cccccc')\n      .attr('d', d3.linkRadial()\n        .angle(function (d) { return d.x / 180 * Math.PI })\n        .radius(function (d) { return d.y / 2 }))\n\n\n    // 绘制文本和节点\n    g.selectAll('.node')\n      .data(nodes)\n      .enter()\n      .append('g')\n      .attr('class', function (d) { return 'node' + (d.children ? ' node--internal' : ' node--leaf') })\n      .attr('transform', function (d) { return 'rotate(' + (d.x - 90) + ')translate(' + d.y / 2 + ')' })\n\n    g.selectAll('.node').append('circle')\n      .attr('r', 5)\n      .style('fill', 'green')\n\n    g.selectAll('.node')\n      .append('text')\n      .attr('dx', function (d) { return d.x < 180 ? 8 : -8 })\n      .attr('dy', '0.31em')\n      .attr('text-anchor', function (d) { return d.x < 180 ? 'start' : 'end' })\n      .attr('transform', function (d) { return d.x < 180 ? 'rotate(90)' : 'rotate(0)' })\n      .text(function (d) {\n        return d.data.name\n      })\n      .style('font-size', '11px')\n\n  }\n\n  componentDidMount() {\n    this.drawCluster(this.data.treeData)\n  }\n\n  render() {\n    return <div></div>\n  }\n\n}\n\nexport default CircleClusteChart"]},"metadata":{},"sourceType":"module"}