{"ast":null,"code":"var _jsxFileName = \"/Volumes/Macintosh HD - \\u6570\\u636E/yu01/d3_ex/src/chart/stackChart/stackChart.jsx\";\nimport React, { Component } from \"react\";\nimport * as d3 from 'd3';\nimport { toJS } from \"mobx\";\n\nclass StackChart extends Component {\n  constructor(props) {\n    super(props);\n    this.data = props.chartState;\n  }\n\n  drawStack(data) {\n    const padding = this.data.padding;\n    const width = this.data.width;\n    const pieHeight = this.data.pieHeight;\n    const margin = 10;\n    const stack = d3.stack().keys([\"apples\", \"bananas\", \"cherries\", \"dates\"]).order(d3.stackOrderNone).offset(d3.stackOffsetNone);\n    const stackData = stack(data);\n    console.log(stackData);\n    const color = d3.scaleOrdinal(d3.schemeCategory10);\n    const svg = d3.select(\"body\").append(\"svg\").attr(\"width\", width).attr(\"height\", pieHeight).style('padding-left', padding.left).style('padding-top', padding.top); // x比例尺\n\n    let xScale = d3.scaleLinear().range([0, width - padding.left - padding.right]); // x值域，其实就是月份\n\n    xScale.domain(data.map(d => d.month));\n    let yScale = d3.scaleLinear().range([pieHeight - padding.top - padding.bottom, 0]); // y值域，求的是转化后的数组的最后一个数组中的各个分数组中第二个元素的最大值，绕的我都有点晕，最大值怎么求可以自己写function\n\n    yScale.domain([0, d3.max(stackData[stackData.length - 1], item => item[1])]); // x轴和y轴\n\n    let xAxis = d3.axisBottom().scale(xScale);\n    let yAxis = d3.axisLeft(yScale); // 添加x轴\n\n    svg.append('g').attr('class', 'axis').attr('transform', 'translate(' + padding.left + ',' + (pieHeight - padding.bottom) + ')').call(xAxis); // 添加y轴\n\n    svg.append('g').attr('class', 'axis').attr('transform', 'translate(' + padding.left + ',' + padding.top + ')').call(yAxis); // 将二维数组的第一维剥离，打散成n列\n\n    let rectContainer = svg.selectAll('rectContainer').data(stackData).enter().append('g').attr('class', 'rectContainer').attr('fill', (d, i) => {\n      return color(i);\n    }); // 渲染每一列\n\n    rectContainer.selectAll('rect').data(d => d).enter().append('rect').attr('x', d => {\n      return xScale(d.data.month) + padding.left + margin / 2;\n    }).attr('y', d => {\n      return yScale(d[1]) + padding.top;\n    }).attr('width', d => {\n      return xScale.bandwidth() - margin;\n    }).attr('height', d => {\n      return pieHeight - padding.top - padding.bottom - yScale(d[1] - d[0]);\n    }).attr('stroke', '#ccc'); // 添加图例圆圈\n\n    svg.selectAll('circle').data(['apples', 'bananas', 'cherries', 'oranges']).enter().append('circle').attr('cx', d => {\n      return width - padding.right - 80;\n    }).attr('cy', (d, i) => {\n      return padding.top + 25 * i;\n    }).attr('r', '6').attr('fill', (d, i) => {\n      return color(i);\n    }); // 添加图例文字\n\n    let texts = svg.selectAll('textContainer').data(['apples', 'bananas', 'cherries', 'oranges']).enter().append('g').attr('class', 'textContainer');\n    texts.append('text').attr('x', d => {\n      return width - padding.right - 60;\n    }).attr('y', (d, i) => {\n      return padding.top + 25 * i;\n    }).attr('dy', '0.32em').text(d => d).attr('fill', (d, i) => color(i));\n  }\n\n  componentDidMount() {\n    this.drawStack(this.data.stackData);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 12\n      }\n    });\n  }\n\n}\n\nexport default StackChart;","map":{"version":3,"sources":["/Volumes/Macintosh HD - 数据/yu01/d3_ex/src/chart/stackChart/stackChart.jsx"],"names":["React","Component","d3","toJS","StackChart","constructor","props","data","chartState","drawStack","padding","width","pieHeight","margin","stack","keys","order","stackOrderNone","offset","stackOffsetNone","stackData","console","log","color","scaleOrdinal","schemeCategory10","svg","select","append","attr","style","left","top","xScale","scaleLinear","range","right","domain","map","d","month","yScale","bottom","max","length","item","xAxis","axisBottom","scale","yAxis","axisLeft","call","rectContainer","selectAll","enter","i","bandwidth","texts","text","componentDidMount","render"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,SAAQC,IAAR,QAAmB,MAAnB;;AAEA,MAAMC,UAAN,SAAyBH,SAAzB,CAAkC;AAChCI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,IAAL,GAAYD,KAAK,CAACE,UAAlB;AACD;;AAEDC,EAAAA,SAAS,CAAEF,IAAF,EAAQ;AACf,UAAMG,OAAO,GAAG,KAAKH,IAAL,CAAUG,OAA1B;AACA,UAAMC,KAAK,GAAG,KAAKJ,IAAL,CAAUI,KAAxB;AACA,UAAMC,SAAS,GAAG,KAAKL,IAAL,CAAUK,SAA5B;AAEA,UAAMC,MAAM,GAAG,EAAf;AAEA,UAAMC,KAAK,GAAGZ,EAAE,CAACY,KAAH,GACXC,IADW,CACN,CAAC,QAAD,EAAW,SAAX,EAAsB,UAAtB,EAAkC,OAAlC,CADM,EAEXC,KAFW,CAELd,EAAE,CAACe,cAFE,EAGXC,MAHW,CAGJhB,EAAE,CAACiB,eAHC,CAAd;AAKA,UAAMC,SAAS,GAAGN,KAAK,CAACP,IAAD,CAAvB;AACAc,IAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AAEA,UAAMG,KAAK,GAAGrB,EAAE,CAACsB,YAAH,CAAgBtB,EAAE,CAACuB,gBAAnB,CAAd;AAEA,UAAMC,GAAG,GAAGxB,EAAE,CAACyB,MAAH,CAAU,MAAV,EACTC,MADS,CACF,KADE,EAETC,IAFS,CAEJ,OAFI,EAEKlB,KAFL,EAGTkB,IAHS,CAGJ,QAHI,EAGMjB,SAHN,EAITkB,KAJS,CAIH,cAJG,EAIapB,OAAO,CAACqB,IAJrB,EAKTD,KALS,CAKH,aALG,EAKYpB,OAAO,CAACsB,GALpB,CAAZ,CAjBe,CAwBf;;AACA,QAAIC,MAAM,GAAG/B,EAAE,CAACgC,WAAH,GACVC,KADU,CACJ,CAAC,CAAD,EAAIxB,KAAK,GAAGD,OAAO,CAACqB,IAAhB,GAAuBrB,OAAO,CAAC0B,KAAnC,CADI,CAAb,CAzBe,CA4Bf;;AACAH,IAAAA,MAAM,CAACI,MAAP,CAAc9B,IAAI,CAAC+B,GAAL,CAASC,CAAC,IAAIA,CAAC,CAACC,KAAhB,CAAd;AAEA,QAAIC,MAAM,GAAGvC,EAAE,CAACgC,WAAH,GACVC,KADU,CACJ,CAACvB,SAAS,GAAGF,OAAO,CAACsB,GAApB,GAA0BtB,OAAO,CAACgC,MAAnC,EAA2C,CAA3C,CADI,CAAb,CA/Be,CAiCf;;AACAD,IAAAA,MAAM,CAACJ,MAAP,CAAc,CAAC,CAAD,EAAInC,EAAE,CAACyC,GAAH,CAAOvB,SAAS,CAACA,SAAS,CAACwB,MAAV,GAAmB,CAApB,CAAhB,EAAyCC,IAAD,IAAUA,IAAI,CAAC,CAAD,CAAtD,CAAJ,CAAd,EAlCe,CAoCf;;AACA,QAAIC,KAAK,GAAG5C,EAAE,CAAC6C,UAAH,GAAgBC,KAAhB,CAAsBf,MAAtB,CAAZ;AACA,QAAIgB,KAAK,GAAG/C,EAAE,CAACgD,QAAH,CAAYT,MAAZ,CAAZ,CAtCe,CAwCf;;AACAf,IAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EACGC,IADH,CACQ,OADR,EACiB,MADjB,EAEGA,IAFH,CAEQ,WAFR,EAEqB,eAAenB,OAAO,CAACqB,IAAvB,GAA8B,GAA9B,IAAqCnB,SAAS,GAAGF,OAAO,CAACgC,MAAzD,IAAmE,GAFxF,EAGGS,IAHH,CAGQL,KAHR,EAzCe,CA8Cf;;AACApB,IAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EACGC,IADH,CACQ,OADR,EACiB,MADjB,EAEGA,IAFH,CAEQ,WAFR,EAEqB,eAAenB,OAAO,CAACqB,IAAvB,GAA8B,GAA9B,GAAoCrB,OAAO,CAACsB,GAA5C,GAAkD,GAFvE,EAGGmB,IAHH,CAGQF,KAHR,EA/Ce,CAoDf;;AACA,QAAIG,aAAa,GAAG1B,GAAG,CAAC2B,SAAJ,CAAc,eAAd,EACjB9C,IADiB,CACZa,SADY,EAEjBkC,KAFiB,GAGjB1B,MAHiB,CAGV,GAHU,EAIjBC,IAJiB,CAIZ,OAJY,EAIH,eAJG,EAKjBA,IALiB,CAKZ,MALY,EAKJ,CAACU,CAAD,EAAIgB,CAAJ,KAAU;AAAE,aAAOhC,KAAK,CAACgC,CAAD,CAAZ;AAAiB,KALzB,CAApB,CArDe,CA4Df;;AACAH,IAAAA,aAAa,CAACC,SAAd,CAAwB,MAAxB,EACG9C,IADH,CACSgC,CAAD,IAAOA,CADf,EAEGe,KAFH,GAGG1B,MAHH,CAGU,MAHV,EAIGC,IAJH,CAIQ,GAJR,EAIcU,CAAD,IAAO;AAAE,aAAON,MAAM,CAACM,CAAC,CAAChC,IAAF,CAAOiC,KAAR,CAAN,GAAuB9B,OAAO,CAACqB,IAA/B,GAAsClB,MAAM,GAAG,CAAtD;AAAyD,KAJ/E,EAKGgB,IALH,CAKQ,GALR,EAKcU,CAAD,IAAO;AAAE,aAAOE,MAAM,CAACF,CAAC,CAAC,CAAD,CAAF,CAAN,GAAe7B,OAAO,CAACsB,GAA9B;AAAmC,KALzD,EAMGH,IANH,CAMQ,OANR,EAMkBU,CAAD,IAAO;AAAE,aAAON,MAAM,CAACuB,SAAP,KAAqB3C,MAA5B;AAAoC,KAN9D,EAOGgB,IAPH,CAOQ,QAPR,EAOmBU,CAAD,IAAO;AAAE,aAAO3B,SAAS,GAAGF,OAAO,CAACsB,GAApB,GAA0BtB,OAAO,CAACgC,MAAlC,GAA2CD,MAAM,CAACF,CAAC,CAAC,CAAD,CAAD,GAAOA,CAAC,CAAC,CAAD,CAAT,CAAxD;AAAuE,KAPlG,EAQGV,IARH,CAQQ,QARR,EAQkB,MARlB,EA7De,CAuEf;;AACAH,IAAAA,GAAG,CAAC2B,SAAJ,CAAc,QAAd,EACG9C,IADH,CACQ,CAAC,QAAD,EAAW,SAAX,EAAsB,UAAtB,EAAkC,SAAlC,CADR,EAEG+C,KAFH,GAGG1B,MAHH,CAGU,QAHV,EAIGC,IAJH,CAIQ,IAJR,EAIeU,CAAD,IAAO;AAAE,aAAO5B,KAAK,GAAGD,OAAO,CAAC0B,KAAhB,GAAwB,EAA/B;AAAmC,KAJ1D,EAKGP,IALH,CAKQ,IALR,EAKc,CAACU,CAAD,EAAIgB,CAAJ,KAAU;AAAE,aAAO7C,OAAO,CAACsB,GAAR,GAAc,KAAKuB,CAA1B;AAA6B,KALvD,EAMG1B,IANH,CAMQ,GANR,EAMa,GANb,EAOGA,IAPH,CAOQ,MAPR,EAOgB,CAACU,CAAD,EAAIgB,CAAJ,KAAU;AAAE,aAAOhC,KAAK,CAACgC,CAAD,CAAZ;AAAiB,KAP7C,EAxEe,CAiFf;;AACA,QAAIE,KAAK,GAAG/B,GAAG,CAAC2B,SAAJ,CAAc,eAAd,EACT9C,IADS,CACJ,CAAC,QAAD,EAAW,SAAX,EAAsB,UAAtB,EAAkC,SAAlC,CADI,EAET+C,KAFS,GAGT1B,MAHS,CAGF,GAHE,EAITC,IAJS,CAIJ,OAJI,EAIK,eAJL,CAAZ;AAKA4B,IAAAA,KAAK,CAAC7B,MAAN,CAAa,MAAb,EACGC,IADH,CACQ,GADR,EACcU,CAAD,IAAO;AAAE,aAAO5B,KAAK,GAAGD,OAAO,CAAC0B,KAAhB,GAAwB,EAA/B;AAAmC,KADzD,EAEGP,IAFH,CAEQ,GAFR,EAEa,CAACU,CAAD,EAAIgB,CAAJ,KAAU;AAAE,aAAO7C,OAAO,CAACsB,GAAR,GAAc,KAAKuB,CAA1B;AAA6B,KAFtD,EAGG1B,IAHH,CAGQ,IAHR,EAGc,QAHd,EAIG6B,IAJH,CAISnB,CAAD,IAAOA,CAJf,EAKGV,IALH,CAKQ,MALR,EAKgB,CAACU,CAAD,EAAIgB,CAAJ,KAAUhC,KAAK,CAACgC,CAAD,CAL/B;AAOD;;AAEDI,EAAAA,iBAAiB,GAAG;AAClB,SAAKlD,SAAL,CAAe,KAAKF,IAAL,CAAUa,SAAzB;AACD;;AAEDwC,EAAAA,MAAM,GAAG;AACP,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AA5G+B;;AAgHlC,eAAexD,UAAf","sourcesContent":["import React,{Component} from \"react\";\nimport * as d3 from 'd3'\nimport {toJS} from \"mobx\";\n\nclass StackChart extends Component{\n  constructor(props) {\n    super(props);\n    this.data = props.chartState\n  }\n\n  drawStack (data) {\n    const padding = this.data.padding\n    const width = this.data.width\n    const pieHeight = this.data.pieHeight\n\n    const margin = 10\n\n    const stack = d3.stack()\n      .keys([\"apples\", \"bananas\", \"cherries\", \"dates\"])\n      .order(d3.stackOrderNone)\n      .offset(d3.stackOffsetNone);\n\n    const stackData = stack(data)\n    console.log(stackData)\n\n    const color = d3.scaleOrdinal(d3.schemeCategory10)\n\n    const svg = d3.select(\"body\")\n      .append(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", pieHeight)\n      .style('padding-left', padding.left)\n      .style('padding-top', padding.top)\n\n    // x比例尺\n    let xScale = d3.scaleLinear()\n      .range([0, width - padding.left - padding.right])\n\n    // x值域，其实就是月份\n    xScale.domain(data.map(d => d.month))\n\n    let yScale = d3.scaleLinear()\n      .range([pieHeight - padding.top - padding.bottom, 0])\n    // y值域，求的是转化后的数组的最后一个数组中的各个分数组中第二个元素的最大值，绕的我都有点晕，最大值怎么求可以自己写function\n    yScale.domain([0, d3.max(stackData[stackData.length - 1], (item) => item[1])])\n\n    // x轴和y轴\n    let xAxis = d3.axisBottom().scale(xScale)\n    let yAxis = d3.axisLeft(yScale)\n\n    // 添加x轴\n    svg.append('g')\n      .attr('class', 'axis')\n      .attr('transform', 'translate(' + padding.left + ',' + (pieHeight - padding.bottom) + ')')\n      .call(xAxis)\n\n    // 添加y轴\n    svg.append('g')\n      .attr('class', 'axis')\n      .attr('transform', 'translate(' + padding.left + ',' + padding.top + ')')\n      .call(yAxis)\n\n    // 将二维数组的第一维剥离，打散成n列\n    let rectContainer = svg.selectAll('rectContainer')\n      .data(stackData)\n      .enter()\n      .append('g')\n      .attr('class', 'rectContainer')\n      .attr('fill', (d, i) => { return color(i) })\n\n    // 渲染每一列\n    rectContainer.selectAll('rect')\n      .data((d) => d)\n      .enter()\n      .append('rect')\n      .attr('x', (d) => { return xScale(d.data.month) + padding.left + margin / 2 })\n      .attr('y', (d) => { return yScale(d[1]) + padding.top })\n      .attr('width', (d) => { return xScale.bandwidth() - margin })\n      .attr('height', (d) => { return pieHeight - padding.top - padding.bottom - yScale(d[1] - d[0]) })\n      .attr('stroke', '#ccc')\n\n    // 添加图例圆圈\n    svg.selectAll('circle')\n      .data(['apples', 'bananas', 'cherries', 'oranges'])\n      .enter()\n      .append('circle')\n      .attr('cx', (d) => { return width - padding.right - 80 })\n      .attr('cy', (d, i) => { return padding.top + 25 * i })\n      .attr('r', '6')\n      .attr('fill', (d, i) => { return color(i) })\n\n    // 添加图例文字\n    let texts = svg.selectAll('textContainer')\n      .data(['apples', 'bananas', 'cherries', 'oranges'])\n      .enter()\n      .append('g')\n      .attr('class', 'textContainer')\n    texts.append('text')\n      .attr('x', (d) => { return width - padding.right - 60 })\n      .attr('y', (d, i) => { return padding.top + 25 * i })\n      .attr('dy', '0.32em')\n      .text((d) => d)\n      .attr('fill', (d, i) => color(i))\n\n  }\n\n  componentDidMount() {\n    this.drawStack(this.data.stackData)\n  }\n\n  render() {\n    return <div></div>\n  }\n\n}\n\nexport default StackChart"]},"metadata":{},"sourceType":"module"}