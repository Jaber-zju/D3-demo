{"ast":null,"code":"var _jsxFileName = \"/Volumes/Macintosh HD - \\u6570\\u636E/yu01/d3_ex/src/chart/partitionchart/partitionCircleChart.jsx\";\nimport React, { Component } from \"react\";\nimport * as d3 from 'd3';\n\nclass PartitionCircleChart extends Component {\n  constructor(props) {\n    super(props);\n    this.data = props.chartState;\n  }\n\n  drawPartition(data) {\n    const padding = this.data.padding;\n    const width = this.data.width;\n    const pieHeight = this.data.pieHeight;\n    const svg = d3.select(\"body\").append(\"svg\").attr(\"width\", this.data.width).attr(\"height\", this.data.pieHeight).style('padding-left', padding.left).style('padding-top', padding.top); // 初始化树状图数据获取器\n\n    const partition = d3.partition().size([width, pieHeight]); // 初始化json数据转成一棵树，这个步骤是非常必要的！！\n    // 将给定的有层次结构的数据转成符合绘图要求的数组\n\n    const root = d3.hierarchy(data); // 分区图中不能sum\n    // .sum(function (d) { return d.value })  // 每个节点的value都是自身和所有后代节点的value之和\n    // 初始化树状图\n\n    let partitionData = partition(root);\n    console.log(partitionData); // 获取分区\n\n    let block = partitionData.descendants();\n    const color = d3.scaleOrdinal(d3.schemeCategory10);\n    let g = svg.selectAll('g').data(block).enter().append('g');\n    g.append('rect').attr('x', d => d.x0).attr('y', d => d.y0).attr('width', d => d.x1 - d.x0).attr('height', d => d.y1 - d.y0).style('stroke', '#ccc').style('fill', (d, i) => color(i));\n    g.append('text').attr('x', function (d) {\n      return d.x0;\n    }).attr('y', function (d) {\n      return d.y0;\n    }).attr('dx', function (d) {\n      return (d.x1 - d.x0) / 2;\n    }) // 文字水平居中\n    .attr('dy', function (d) {\n      return (d.y1 - d.y0) / 2 - d.data.name.length / 2 * 12;\n    }) // 文字垂直居中,有点瑕疵\n    .attr('font-size', function (d) {\n      return 12 - d.depth + 'px';\n    }) // 文字按深度缩小\n    .attr('writing-mode', 'tb') // 文字从上往下书写\n    .text(function (d) {\n      return d.data.name;\n    });\n  }\n\n  componentDidMount() {\n    this.drawPartition(this.data.packData);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 12\n      }\n    });\n  }\n\n}\n\nexport default PartitionCircleChart;","map":{"version":3,"sources":["/Volumes/Macintosh HD - 数据/yu01/d3_ex/src/chart/partitionchart/partitionCircleChart.jsx"],"names":["React","Component","d3","PartitionCircleChart","constructor","props","data","chartState","drawPartition","padding","width","pieHeight","svg","select","append","attr","style","left","top","partition","size","root","hierarchy","partitionData","console","log","block","descendants","color","scaleOrdinal","schemeCategory10","g","selectAll","enter","d","x0","y0","x1","y1","i","name","length","depth","text","componentDidMount","packData","render"],"mappings":"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","sourcesContent":["import React,{Component} from \"react\";\nimport * as d3 from 'd3'\n\nclass PartitionCircleChart extends Component{\n  constructor(props) {\n    super(props);\n    this.data = props.chartState\n  }\n\n  drawPartition (data) {\n    const padding = this.data.padding\n    const width = this.data.width\n    const pieHeight = this.data.pieHeight\n\n    const svg = d3.select(\"body\")\n      .append(\"svg\")\n      .attr(\"width\", this.data.width)\n      .attr(\"height\", this.data.pieHeight)\n      .style('padding-left', padding.left)\n      .style('padding-top', padding.top)\n\n    // 初始化树状图数据获取器\n    const partition = d3.partition().size([width, pieHeight])\n\n    // 初始化json数据转成一棵树，这个步骤是非常必要的！！\n    // 将给定的有层次结构的数据转成符合绘图要求的数组\n    const root = d3.hierarchy(data)\n      // 分区图中不能sum\n      // .sum(function (d) { return d.value })  // 每个节点的value都是自身和所有后代节点的value之和\n\n    // 初始化树状图\n    let partitionData = partition(root)\n    console.log(partitionData)\n    // 获取分区\n    let block = partitionData.descendants()\n\n    const color = d3.scaleOrdinal(d3.schemeCategory10)\n\n    let g = svg.selectAll('g')\n      .data(block)\n      .enter()\n      .append('g')\n\n    g.append('rect')\n      .attr('x', d => d.x0)\n      .attr('y', d => d.y0)\n      .attr('width', d => d.x1-d.x0)\n      .attr('height', d => d.y1-d.y0)\n      .style('stroke', '#ccc')\n      .style('fill', (d, i) => color(i))\n\n    g.append('text')\n      .attr('x', function (d) { return d.x0 })\n      .attr('y', function (d) { return d.y0 })\n      .attr('dx', function (d) { return (d.x1 - d.x0) / 2 }) // 文字水平居中\n      .attr('dy', function (d) { return (d.y1 - d.y0) / 2 - d.data.name.length / 2 * 12 }) // 文字垂直居中,有点瑕疵\n      .attr('font-size', function (d) { return 12 - d.depth + 'px' }) // 文字按深度缩小\n      .attr('writing-mode', 'tb') // 文字从上往下书写\n      .text(function (d) { return d.data.name })\n  }\n\n  componentDidMount() {\n    this.drawPartition(this.data.packData)\n  }\n\n  render() {\n    return <div></div>\n  }\n\n}\n\nexport default PartitionCircleChart"]},"metadata":{},"sourceType":"module"}