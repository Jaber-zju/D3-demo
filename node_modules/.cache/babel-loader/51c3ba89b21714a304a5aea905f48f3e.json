{"ast":null,"code":"var _jsxFileName = \"/Volumes/Macintosh HD - \\u6570\\u636E/yu01/d3_ex/src/pie_chart.jsx\";\nimport React, { Component } from \"react\";\nimport * as d3 from 'd3';\n\nclass Pie_chart extends Component {\n  constructor(props) {\n    super(props);\n    this.data = props.chartState;\n  }\n\n  drawPie(data) {\n    const padding = this.data.padding;\n    const svg = d3.select(\"body\").append(\"svg\").attr(\"width\", this.data.width).attr(\"height\", this.data.pieHeight); // .style('padding-left', padding.left)\n    // .style('padding-top', padding.top)\n    // 将数据转化成圆环图需要的数据结构\n    // const pie = d3.pie().padAngle(0.02)(data)\n\n    const pie = d3.pie()(data); // 设置圆环内外半径大小\n\n    const outerRadius = this.data.width / 4;\n    const innerRadius = this.data.pieHeight / 6; // 以半径大小创建圆环的圆弧\n\n    const arc = d3.arc().innerRadius(innerRadius).outerRadius(outerRadius); // .cornerRadius(20)   // 环的圆角\n    // 根据前面的圆环图数据来创建一个组合，这个组合用来包含之后的圆弧线\n\n    const arcs = svg.selectAll(\"g\").data(pie) // 只能在这里绑定数据才有用，先绑定数据再去画线\n    .enter().append(\"g\").attr(\"transform\", \"translate(\" + outerRadius + \",\" + outerRadius + \")\");\n    const color = d3.schemeSet2;\n    console.log(color); // 这一步是画图的关键，画线\n\n    arcs.append(\"path\").attr(\"fill\", (d, i) => {\n      return color[d.index];\n    }) // 这一步必不可少\n    .attr(\"d\", function (d) {\n      return arc(d);\n    }); // .attr('stroke', 'black')\n    // .attr('stroke-width', 1)\n    // 添加文字\n\n    arcs.append(\"text\").attr(\"transform\", function (d) {\n      return \"translate(\" + arc.centroid(d) + \")\";\n    }).attr(\"text-anchor\", \"middle\").text(function (d) {\n      return d.value;\n    }); // 设置圆环内外半径大小\n\n    const outerRadius2 = outerRadius + 30;\n    const innerRadius2 = outerRadius; // 以半径大小创建圆环的圆弧\n\n    const arc2 = d3.arc().innerRadius(innerRadius2).outerRadius(outerRadius2); // .cornerRadius(20)   // 环的圆角\n    // 根据前面的圆环图数据来创建一个组合，这个组合用来包含之后的圆弧线\n\n    const arcs2 = svg.selectAll(\"g\").data(pie) // 只能在这里绑定数据才有用，先绑定数据再去画线\n    .enter().append(\"g\").attr(\"transform\", \"translate(\" + outerRadius2 + \",\" + outerRadius2 + \")\");\n    svg.style('left', outerRadius2).style('top', outerRadius2);\n    const color2 = d3.schemeSet1;\n    console.log(color2); // 这一步是画图的关键，画线\n\n    arcs.append(\"path\").attr(\"fill\", (d, i) => {\n      return color2[d.index];\n    }) // 这一步必不可少\n    .attr(\"d\", function (d) {\n      return arc2(d);\n    }); // .attr('stroke', 'black')\n    // .attr('stroke-width', 1)\n    // 添加文字\n\n    arcs2.append(\"text\").attr(\"transform\", function (d) {\n      return \"translate(\" + arc2.centroid(d) + \")\";\n    }).attr(\"text-anchor\", \"middle\").text(function (d) {\n      return d.value;\n    });\n  }\n\n  componentDidMount() {\n    this.drawPie(this.data.pieData);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 12\n      }\n    });\n  }\n\n}\n\nexport default Pie_chart;","map":{"version":3,"sources":["/Volumes/Macintosh HD - 数据/yu01/d3_ex/src/pie_chart.jsx"],"names":["React","Component","d3","Pie_chart","constructor","props","data","chartState","drawPie","padding","svg","select","append","attr","width","pieHeight","pie","outerRadius","innerRadius","arc","arcs","selectAll","enter","color","schemeSet2","console","log","d","i","index","centroid","text","value","outerRadius2","innerRadius2","arc2","arcs2","style","color2","schemeSet1","componentDidMount","pieData","render"],"mappings":"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","sourcesContent":["import React,{Component} from \"react\";\nimport * as d3 from 'd3'\n\nclass Pie_chart extends Component{\n  constructor(props) {\n    super(props);\n    this.data = props.chartState\n  }\n\n  drawPie (data) {\n    const padding = this.data.padding\n\n    const svg = d3.select(\"body\")\n      .append(\"svg\")\n      .attr(\"width\", this.data.width)\n      .attr(\"height\", this.data.pieHeight)\n      // .style('padding-left', padding.left)\n      // .style('padding-top', padding.top)\n\n    // 将数据转化成圆环图需要的数据结构\n    // const pie = d3.pie().padAngle(0.02)(data)\n    const pie = d3.pie()(data)\n\n    // 设置圆环内外半径大小\n    const outerRadius = this.data.width / 4;\n    const innerRadius = this.data.pieHeight / 6;\n\n    // 以半径大小创建圆环的圆弧\n    const arc = d3.arc()\n                  .innerRadius(innerRadius)\n                  .outerRadius(outerRadius)\n                  // .cornerRadius(20)   // 环的圆角\n\n    // 根据前面的圆环图数据来创建一个组合，这个组合用来包含之后的圆弧线\n    const arcs = svg.selectAll(\"g\")\n                    .data(pie)  // 只能在这里绑定数据才有用，先绑定数据再去画线\n                    .enter()\n                    .append(\"g\")\n                    .attr(\"transform\",\"translate(\" + outerRadius + \",\" + outerRadius + \")\");\n\n    const color = d3.schemeSet2\n    console.log(color)\n\n\n    // 这一步是画图的关键，画线\n    arcs.append(\"path\")\n      .attr(\"fill\", (d, i) => {\n        return color[d.index]\n      })\n      // 这一步必不可少\n      .attr(\"d\",function(d){\n        return arc(d)\n      })\n      // .attr('stroke', 'black')\n      // .attr('stroke-width', 1)\n\n    // 添加文字\n    arcs.append(\"text\")\n      .attr(\"transform\",function(d){\n        return \"translate(\" + arc.centroid(d) + \")\"\n      })\n      .attr(\"text-anchor\",\"middle\")\n      .text(function(d){\n        return d.value\n      })\n\n\n\n    // 设置圆环内外半径大小\n    const outerRadius2 = outerRadius + 30\n    const innerRadius2 = outerRadius\n\n    // 以半径大小创建圆环的圆弧\n    const arc2 = d3.arc()\n      .innerRadius(innerRadius2)\n      .outerRadius(outerRadius2)\n    // .cornerRadius(20)   // 环的圆角\n\n    // 根据前面的圆环图数据来创建一个组合，这个组合用来包含之后的圆弧线\n    const arcs2 = svg.selectAll(\"g\")\n      .data(pie)  // 只能在这里绑定数据才有用，先绑定数据再去画线\n      .enter()\n      .append(\"g\")\n      .attr(\"transform\",\"translate(\" + outerRadius2 + \",\" + outerRadius2 + \")\");\n\n    svg.style('left', outerRadius2)\n      .style('top', outerRadius2)\n    const color2 = d3.schemeSet1\n    console.log(color2)\n\n\n    // 这一步是画图的关键，画线\n    arcs.append(\"path\")\n      .attr(\"fill\", (d, i) => {\n        return color2[d.index]\n      })\n      // 这一步必不可少\n      .attr(\"d\",function(d){\n        return arc2(d)\n      })\n    // .attr('stroke', 'black')\n    // .attr('stroke-width', 1)\n\n    // 添加文字\n    arcs2.append(\"text\")\n      .attr(\"transform\",function(d){\n        return \"translate(\" + arc2.centroid(d) + \")\"\n      })\n      .attr(\"text-anchor\",\"middle\")\n      .text(function(d){\n        return d.value\n      })\n  }\n\n  componentDidMount() {\n    this.drawPie(this.data.pieData)\n  }\n\n  render() {\n    return <div></div>\n  }\n\n}\n\nexport default Pie_chart"]},"metadata":{},"sourceType":"module"}